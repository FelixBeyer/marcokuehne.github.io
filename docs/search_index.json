[["index.html", "Becoming Fluent in Data A Personal Journey – Every Time. Dust and Dark", " Becoming Fluent in Data A Personal Journey – Every Time. Marco Kühne 2022-09-13 Dust and Dark A dusty lecture hall. The light cut through the darkness from the left side of the room. A dozen of seats in each bench, only few occupied by small groups of students who were trying to make sure that they sit far from each other and as far as possible from the lecturer. The bearish but competent assistant professor explained how to analyze and evaluate the results of various memory and cognition experiments through boxplots, t-test and the like in that software. My creaky, slow but loyal laptop in front of me. That’s where R was introduced in my psychology undergraduate studies. – The Times They Are A-Changin’. Lecture Hall. Melanchthonianum. MLU University of Halle-Wittenberg "],["teach-learn-repeat.html", "Teach – Learn – Repeat", " Teach – Learn – Repeat Teaching and learning are strongly connected. I fell in love with learning by teaching the moment I came across this concept. It put the experiences I made into scientific context. Studying for the undergraduate math classes, I soon became head of the study group, than a private tutor, than a student assistant and a doctoral student, now, teaching stuff for over a decade. Still, I feel that (trying) to teach stuff is the best way of learning it myself. By writing the gitbook I hope to force myself to pinpoint exactly what I know and don’t know about data and how to fill the gaps. Luckily, I am not alone with the approach of creating classes or writing books to learn: I could feel that econometrics was indispensable, and yet I was missing something. But what? It was a theory of causality […]. So, desperate, I did what I always do when I want to learn something new — I developed a course on causality to force myself to learn all the things I didn’t know. Scott Cunningham. In: Causal Inference – The Mixtape This project helped me to learn more about R, RStudio, R Markdown, R Bookdown, HTML/CSS, Git and Github, empirical research, causal inference, statistics, math, frustration tolerance and fun. "],["aim-of-this-books.html", "Aim of this books", " Aim of this books I welcome you to join me on the way to become fluent in data. You go from zero you hero in data analysis and data science and will become data fluent and learn major skills that you can use in your academic and business career. The ability to take data — to be able to understand it, to process it, to extract value from it, to visualize it, to communicate it — that’s going to be a hugely important skill in the next decades… Hal Varian, 2009. Googles chief economist. In: McKinsey Quarterly 2009 In addition and independent of specific career, I would like to foster people’s data literacy. Data literacy is the ability to read, understand, create, and communicate data as information. I would like to enable and empower all people to understand the data work of others. Don’t take numbers for granted. It’s a long journey to get them. Don’t be satisfied with a summary or conclusion from someone else. It’s worthwhile checking data sources and data work. Either to replicate and validate the data work of others or to form your own opinion. "],["structure-of-this-books.html", "Structure of this books Content Color", " Structure of this books Content Data is everywhere. “Becoming Fluent in Data” brings data and statistics to life. The first half of the course (chapter 1 – 7) introduces all the basics from scratch. We measure and collect data to make informed decisions. Most decisions are complex, costly and have long-term implications. It is therefore vital that such decisions are based on the best available evidence. The second half of the course (chapter 8 – 13) focuses on the analysis of relationships. It opens the realm of research questions and projects. We try to answer apparently simple but intriguing questions from daily life. For example: Can money buy happiness? Does watching TV make us happy? What are the economic consequences of being left-handed? How does beauty affect your income? The workhorse procedure is regression, a statistical technique that relates a outcome variable to one or more explanatory variables. Color Colored paragraphs give you a visual overview of things to watch out: A definition is a statement of the meaning of a term. Bazinga highlights a memorable fact. This is for the truly dedicated. It’s your turn. Do you like to read more about this? "],["about-the-author.html", "About the author", " About the author   Welcome! My name is Marco Kühne. The very first thing I want to do is to invite you to call me Marco. That is, if we meet on the street, you come talk to me during office hours, you ask some question; Marco’s the name that I respond to. Web: http://marco-kuehne.com/ Twitter: https://twitter.com/marco_kuhne GitHub: https://github.com/MarcoKuehne I am a PhD candidate in Economics at the European University Viadrina (https://www.wiwi.europa-uni.de/). I am generally keen on teaching topics related to research design, quantitative methods, and statistical software. My main methodological interests in quantitative social science include panel data modelling, causal inference with observational data and R programming. I am also a gardening fanatic, a coffee enthusiast, an engaged ballroom dancer, a (vegetarian) food lover. I enjoy cutting down big trees and practicing new languages in its own sake. Feel free to contact me! "],["data-is-everywhere.html", "Chapter 1 Data is everywhere 1.1 Why we measure 1.2 How we measure 1.3 Types of data 1.4 The reality behind the data 1.5 Data sources 1.6 Dataset collections 1.7 Open data", " Chapter 1 Data is everywhere 1.1 Why we measure Two stories. True stories. 1.1.1 Women are having far fewer children. Figure 1.1: Average number of babies per woman from 1800 to today. Source: Gapminder There is a dramatic change in the number of babies per woman in the last 50 years. The maintenance of a stable human population requires that the mean number of children women should have by the completion of the fertile part of their life is 2.1.1 We cannot know this without measurement. We may have an impression that families are smaller, but that could just be the people we know directly – and most of us know directly at most a couple of hundred households.2 We have to measure to know the big picture and we have to keep measuring to see how the picture is changing. Size matters. Change matters. Without measurement we can describe neither current condition nor the history of current condition. 1.1.2 Global surface temperature is rising. Figure 1.2: Global temperature in the common era. Source: Wikipedia The 2011–2020 decade warmed to an average 1.09 °C [0.95–1.20 °C] compared to the pre-industrial baseline (1850–1900). Figure 1.2 shows a global surface temperature reconstruction over the last 2000 years using proxy data from tree rings, corals, and ice cores in blue. Directly observed data is in red (Wikipedia contributors 2022). Data is required to make informed decisions. Decisions about climate change are complex, costly and have long-term implications. It is therefore vital that such decisions are based on the best available evidence. We need to understand the quality and provenance of that evidence, and whether any assumptions have been made in generating it. 1.2 How we measure Data collection is the process of gathering and measuring information. As social scientists we rarely count tree rings or analyse corals and ice cores. In social science, common data collection methods are: Surveys (paper vs. online) Interviews Observation Experiment (mainly conducted by psychologists) Focus group (qualitative research) Case study (qualitative research) Primary data refers to the first hand data gathered by the researcher or practitioner himself. Secondary data means data collected by someone else. As you expect, it can be more complicated, cost and time expensive to collect data yourself. A lot of data can be found at various institutions (e.g. statistical offices). Sometimes data can be freely downloaded from web sources. Sometimes a registration is required. Some data is available for research but not for commercial purposes. Data Scraping is the transfer of information from a source like a website to a database. 1.3 Types of data The following distinctions of data are important to this course. Quantitative data deals with things that are measurable and can be expressed in numbers or figures, or using other values that express quantity. That being said, quantitative data is usually expressed in numerical form and can represent size, length, duration, amount, price, and so on. Qualitative data is often non-numeric. Data can be text, audio or visual. There are quantitative approaches to analyse text (text mining, e.g. sentiment analysis) and visual data (machine learning, e.g. image classification). Sometimes quantitative data is understood as metric continuous as opposed to qualitative data in the form of categorical data. Cross-sectional data is measured at a point in time (e.g. one year). Longitudinal data or panel data is repeated measures over time (e.g. multiple years). 1.4 The reality behind the data … it is important not to lose sight of the individuals whose lives provide the data for the models. Although variables rather than individual people may become the subjects of the statistician’s narrative, it is individuals rather than variables who have the capacity to act and reflect on society. Elliott, 1999: 101–2. In: Byrne, D. (2002). Interpreting Quantitative Data. The Encyclopaedia of Statistical Sciences (1999) describes variables as manifest or observed when they are directly measurable or hidden or latent as “idealized constructs at best only indirectly measurable”. Remember Figure 1.2 that shows a global surface temperature reconstruction using proxy data from tree rings, corals, and ice cores in blue and directly observed data in red. Some concepts are easy to grasp and there is a broad consensus on how to measure them. Age is indisputable measured in years. Number of Twitter follower at a given time. Temperature can be measured in Celsius or Fahrenheit (SI units). There is an accepted translation between the Celsius and Fahrenheit, i.e. 0°C correspond to 32°F and 0°F correspond to -17.8°C. Some concepts are harder to grasp and require a specific argument. Intelligence. What is it and how can we measure it? Populism. What is it and how can we measure it? Happiness. What is it and how can we measure it? We may ask the questions: What is the effect of age on Twitter usage? What is the effect of intelligence on happiness? In order to conduct an empirical analysis, all concepts need to be variables (columns in rectangular data). It’s likely that there will be a variable age and follower as well as intelligence and happiness. There are common or popular believes on what happiness is. But there is no universal accepted measure. Operationalization means turning abstract concepts into measurable observations. It involves clearly defining your variables and indicators. Read more: https://www.scribbr.com/methodology/operationalization/ One might apply the Wechsler Adult Intelligence Scale (version IV, released 2008) to measure intelligence. Scores from intelligence tests are estimates of intelligence. Unlike, for example, distance and mass, a concrete measure of intelligence cannot be achieved given the abstract nature of the concept of “intelligence”. Variables of a dataset are often accompanied by a detailed explanation of called a codebook. A codebook describes the contents, structure, and layout of a data collection. What is the variable P11101 in the codebook of pequiv dataset from SOEP https://www.diw.de/documents/publikationen/73/diw_01.c.704530.de/diw_ssp0772.pdf 1.5 Data sources Here are some examples of high quality data sources that are useful in social science. German General Social Survey Story: Its mission is to collect and disseminate high quality statistical surveys on attitudes, behavior, and social structure in Germany. Link: https://www.gesis.org/allbus/allbus Since: 1980 biyearly new waves File Formats: Stata, SPSS Access: Register Academic Track Data characteristic: cross-sectional Socio-Economic Panel Story: One of the largest and longest-running multidisciplinary household surveys worldwide. Every year, approximately 30,000 people in 15,000 households are interviewed for the SOEP study. Link: https://www.diw.de/en/soep Since: 1984 yearly new waves File Formats: Stata, R, SPSS, ASCII Access: Senior researcher as contractor Data characteristic: paneldata Notes: Comprehensive online companion http://companion.soep.de/ Gravity Data by CEPII Story: Data to estimate gravity equations: trade, GDP, population, trade agreements, etc. For all country pairs, 1948-2020. Link: http://www.cepii.fr/CEPII/en/bdd_modele/bdd_modele_item.asp?id=8 Since: Irregularly, 2015 (full/light), 2020, 2021 File Formats: Stata, R, CSV Access: Register, anyone Gapminder Story: Gapminder’s stated mission is “Fighting devastating ignorance with fact-based worldviews everyone can understand.” Link: https://www.gapminder.org/data/ Since: 2005 (dates back hundreds of years) File formats: CSV or XLSX Access: Free for everyone Challenge your world view: https://upgrader.gapminder.org/ SlaveVoyages Story: The SlaveVoyages website is a collaborative digital initiative that compiles and makes publicly accessible records of the largest slave trades in history. Link: https://www.slavevoyages.org/ Since: 2008 File formats: Excel, CSV Access: Free for everyone Twitter Story: Twitter is what’s happening and what people are talking about right now. · We serve the public conversation. · Life’s not about a job, it’s about purpose. Link: https://developer.twitter.com/ Since: 2006 File formats: JSON Access: Register developer account (research track), API WhatsApp Story: Instant messenger. Link: https://www.whatsapp.com/ Since: 2009 File Format: txt (export chat history) Access: You 1.6 Dataset collections Google Dataset Search Link: https://datasetsearch.research.google.com/ Datasets: 25.000.000 Established: 2020 Kaggle Link: https://www.kaggle.com/datasets Datasets: About 50.000 Established: 2010 Datahub Link: https://datahub.io/collections Established: 2011 R Datasets Link: https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html 1.7 Open data A lot of data from the listed data sources comes freely available. Open data is data that is openly accessible, exploitable, editable and shared by anyone for any purpose, even commercially. Open data is licensed under an open license. The statistical office in Germany provides open data under the Data Licence Germany 2.0 It is 2.1 rather than 2 to allow for the failure of some female children themselves to live through the fertile years of adult life.↩︎ According to Tian Zheng (Columbia College), the average American knows about 600 people. NY times https://www.nytimes.com/2013/02/19/science/the-average-american-knows-how-many-people.html↩︎ "],["software-is-everywhere.html", "Chapter 2 Software is everywhere 2.1 Software 2.2 File formats", " Chapter 2 Software is everywhere Data is inseparable from software.3 Data comes in various file formats that are connected to a specific software. Although most software can handle most of the common file formats. So, if almost all software can handle almost all data, how should we choose one? When choosing a software for data analysis there are many factors to consider: Does it run on your computer? Can you afford it? Do your colleagues use it? Does the software provide all the methods you need? Check out the versatile discussion on the measurement of data analysis software popularity by Robert München: The Popularity of Data Analysis Software 2.1 Software 2.1.1 Command line interface (CLI) A command-line interpreter or command-line processor uses a command-line interface (CLI) to receive commands from a user in the form of lines of text. To open up the command prompt (on Windows), just press the windows key and search for cmd. When R is installed, it comes with a utility called Rscript. This allows you to run R commands from the command line. If Rscript is in your PATH, then typing Rscript into the command line, and pressing enter, will not result in an error. Otherwise, you might get a message saying “‘Rscript’ is not recognized as an internal or external command.” If that’s the case, then to use Rscript, you will either need to add it to your PATH (as an environment variable), or append the full directory of the location of Rscript on your machine. To find the full directory, search for where R is installed your computer. Figure 2.1: Command Line Interface on Windows with R The above example runs the commands 1*2*3*4 factorial(4) class(4) 1:4 2.1.2 Graphical user interface (GUI) The GUI, graphical user interface, is a form of user interface that allows users to interact with electronic devices through graphical icons and audio indicator such as primary notation, instead of text-based UIs, typed command labels or text navigation. GUIs were introduced in reaction to the perceived steep learning curve of CLIs (command-line interfaces), which require commands to be typed on a computer keyboard. Figure 2.2: RGui on Windows. Feels like no GUI. When you can click File -&gt; Open, you are on a GUI. 2.1.3 Integrated development environment (IDE) RStudio is an integrated development environment (IDE) for R. “The RStudio IDE is a set of integrated tools designed to help you be more productive with R and Python. It includes a console, syntax-highlighting editor that supports direct code execution, and a variety of robust tools for plotting, viewing history, debugging and managing your workspace.” RStudio RStudio comes with four panes Source Editor (open, edit and execute R code) Console (type and execute R code, it is like the command line) Environment (shows objects) Misc tabs (file manager, plots, package manager, help, …) Figure 2.3: Graphical User Interface in RStudio 2.1.4 Software in your browser An online compiler allows to test a statistical (or programming) language, without any download, install or payment. There are various programming and web languages available at https://onecompiler.com/. 1*2*3*4 factorial(4) class(4) 1:4 Copy paste the above code in the console below. Click Run. 2.1.5 Software in the cloud You can pay for software as a service and use cloud computing for data analysis. RStudio Cloud: https://rstudio.cloud/ Codeanywhere: https://codeanywhere.com/ These cloud services are hardly ever free or free with very limited resources. Hardware, software and energy cost money. Google’s own estimate which is a decade old shows that the energy required to power a Google search could power a low energy (10 watt) light bulb for 108 seconds. – https://fullfact.org/environment/google-search/ 2.2 File formats 2.2.1 Text files A text file is a simple way of storing information line by line. Imagine the following dialogue. 11.04.20, 09:05 - Mum: Marcus discipulus est. 11.04.20, 10:46 - Marco: Tabellam tenet. 11.04.20, 10:53 - Mum: Scholam intrat, grammaticum salutat. 11.04.20, 10:46 - Marco: Graece et Latine scribere et legere libenter discit. 11.04.20, 10:46 - Mum: Grammaticum autem timet. It represents the typical structure of a WhatsApp chat export, i.e.  DATE, TIME - AUTHOR: MESSAGE The information is separated by comma, hyphen and colon. A .txt file can be opened with any text editor. Other notable file types can be opened and read by a human with a text editor as well, e.g. an R script (ending .R) or R Markdown file (ending .Rmd). Here is a minimal example:4 #&gt; [1] &quot;11.04.20, 09:05 - Mum: Marcus discipulus est. &quot; #&gt; [2] &quot;11.04.20, 10:46 - Marco: Tabellam tenet. &quot; #&gt; [3] &quot;11.04.20, 10:53 - Mum: Scholam intrat, grammaticum salutat. &quot; #&gt; [4] &quot;11.04.20, 10:46 - Marco: Graece et Latine scribere et legere libenter discit.&quot; #&gt; [5] &quot;11.04.20, 10:46 - Mum: Grammaticum autem timet.&quot; 2.2.2 Text with structure The trusty .csv (comma separated values) file is, still, one of the most common file types for data storage and exchange. It is knocking around ten years before the first personal computer (that’s since 1972 ). A .csv file stores tabular data in plain text format. Each line is a data record and each record has one or more fields, separated by commas. Tabular data can also be separated by a TAB or semicolon. Tabular data refers to data that is organized in a table with rows and columns. Within the table, the rows represent observations and the columns represent attributes. Here is a minimal example:5 #&gt; Date Time Name Message #&gt; 1 11.04.20 09:05 Mum Marcus discipulus est. #&gt; 2 11.04.20 10:46 Marco Tabellam tenet. #&gt; 3 11.04.20 10:53 Mum Scholam intrat, grammaticum salutat. #&gt; 4 11.04.20 10:46 Marco Graece et Latine scribere et legere libenter discit. #&gt; 5 11.04.20 10:46 Mum Grammaticum autem timet. Check the category of data analysis software and the list of statistical software.↩︎ The minimal file chat.txt is here: https://raw.githubusercontent.com/MarcoKuehne/marcokuehne.github.io/main/data/chat.txt↩︎ The minimal file chat.csv is here: https://raw.githubusercontent.com/MarcoKuehne/marcokuehne.github.io/main/data/chat.csv↩︎ "],["group-comparison.html", "Chapter 3 Group Comparison 3.1 Story Telling 3.2 Comparability 3.3 Never use pie charts 3.4 Application", " Chapter 3 Group Comparison ** Learning Goals** - Conceptual Skills: What makes a good comparison. Never use pie charts. - Data Skills: + R Basics: Install and load a package. Load Stata files into R. + Data Manipulation: tidyverse language (glimpse(), count(), filter(), summarise()). + Data Visualization: Pie chart and bar plot. Social sciences is about the study of human beings and their interactions. As such, we frequently want to compare two or more groups of human beings, organizations, teams, countries, etc., with each other to see whether they are similar or different from each other. Sometimes we also want to track individuals over time and see how they may have changed in some way or other. In short, comparing groups is an essential technique to make inferences and helps us better understand the diversity surrounding us. One big goal of group comparisons is to answer the question: Did it work? Comparing groups can help answer this question. What would have happened if children and families would not have received a program or service? Another big goal of group comparisons is to answer the question: Is there a systematic difference? Groups are hardly ever identical. Comparing groups will reveal differences between them. When group differences are remarkable they might indicate a case of discrimination (think about pay or health). Here is how the The Administration for Children and Families (ACF) explains how and why meaningful comparison groups are important. 3.1 Story Telling Groups can be compared via numeric figures or graphical instruments or a combination of both. Numeric summaries can be the mean (the average), median (the middle value) or mode (the most likely value). But it can be as simple as an absolute frequency or a percentage or proportion. In summer 2022 5.131 students were enrolled at Viadrina European University. 71 % had a German citizenship and 29 % were international students. A graphical representation can be a boxplot, histogram or density curve. There are more artistic way as well. Note that certain calculations and visualizations only make sense for continuous variables (cf. scale of measurements). Most data visualization is done for the purpose of communication. We have an insight about a dataset, and we have a potential audience, and we would like to convey our insight to our audience. To communicate our insight successfully, we will have to present the audience with a clear and exciting story. Figure 3.1: Possible gender difference in working parttime. The illustration conveys the information: 41 % of women work part-time, whereas only 12 % of men do. The data-ink ratio is the proportion of Ink that is used to present actual data compared to the total amount of ink (or pixels) used in the entire display. Good graphics should include only data-Ink. Non-Data-Ink is to be deleted everywhere where possible. Read more: http://socialmediaguerilla.com/content-marketing/less-is-more-improving-the-data-ink-ratio/ 3.2 Comparability What makes a good comparison? Before we can jump into group comparisons, we need to make ourselves aware of whether our groups can be compared in the first place. We are looking at the characteristics of our groups. Some commonly considered features include: Size: Are the groups about equally large? Time: Was the data collected around the same time? Exogenous variables: Is the distribution of characteristics we are not interested in approximately the same across groups? Don’t be satisfied with the information that is presented to you. Search for context information. 3.3 Never use pie charts Pie charts are evil. Why? Check the note of the documentation of pie(): ?pie() Pie charts are a very bad way of displaying information. The eye is good at judging linear measures and bad at judging relative areas. A bar chart or dot chart is a preferable way of displaying this type of data. Cleveland (1985), page 264: “Data that can be shown by pie charts always can be shown by a dot chart. This means that judgements of position along a common scale can be made instead of the less accurate angle judgements.” This statement is based on the empirical investigations of Cleveland and McGill as well as investigations by perceptual psychologists. Can you tell whether Singapore or London have the higher share? Can you tell now? # Plot the chart. barplot(x, names.arg = labels) Here is the R code. # Create data for the graph. x &lt;- c(14, 62, 17, 53) labels &lt;- c(&quot;London&quot;, &quot;New York&quot;, &quot;Singapore&quot;, &quot;Mumbai&quot;) # Plot the chart. pie(x,labels) # Plot the chart. barplot(x, names.arg = labels) 3.4 Application The SOEP practice dataset is highly simplified. It simulates the pattern of real SOEP research data. It comes in Stata format (.dta) and can be downloaded from the homepage of DIW Berlin (in German or English): https://www.diw.de/en/diw_01.c.603154.en/soep_in_the_college_classroom.html There are two versions (years 2000-2004, 9 variables and years 2015-2019, 15 variables). They contain multiple observations per person over time. Each row is uniquely identified by a year-id combination (long format panel data). 3.4.1 Loading the data A .dta file is loaded from GitHub repo with the haven package. Alternatively, download the files and specify a path. # load package library(haven) # read dta file from github soep &lt;- read_dta(&quot;https://github.com/MarcoKuehne/marcokuehne.github.io/blob/main/data/soep_lebensz_en.dta?raw=true&quot;) 3.4.2 Look into data The SOEP practice dataset consists of a total of 9 original variables and 12,922 measurements which we can see with the glimpse() function from the tidyverse package. id is a person identifier. The variables have speaking labels (e.g. year, sex, education). There are two versions of health and satisfaction, one is original and one is standardized. library(tidyverse) glimpse(soep) #&gt; Rows: 12,922 #&gt; Columns: 9 #&gt; $ id &lt;dbl&gt; 312, 399, 399, 457, 457, 457, 748, 761, 761, 1044, 1044, 10… #&gt; $ year &lt;dbl&gt; 2004, 2000, 2001, 2000, 2002, 2004, 2000, 2000, 2001, 2000,… #&gt; $ sex &lt;dbl+lbl&gt; 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1… #&gt; $ education &lt;dbl&gt; NA, 12.0, 12.0, 18.0, 18.0, 18.0, 14.0, 16.0, 16.0, 14.0, 1… #&gt; $ no_kids &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2,… #&gt; $ health_org &lt;dbl+lbl&gt; 4, 4, 4, 3, 3, 2, 3, 3, 3, 4, 3, 4, 4, 4, 2, 2, 2, 1, 2… #&gt; $ satisf_org &lt;dbl+lbl&gt; 7, 8, 9, 8, 7, 4, 5, 7, 7, 5, 7, 8, 6, 7,… #&gt; $ health_std &lt;dbl&gt; 0.5670103, 0.5670103, 0.5670103, -0.4639175, -0.4639175, -1… #&gt; $ satisf_std &lt;dbl&gt; -0.09090909, 0.47727272, 1.04545450, 0.47727272, -0.0909090… glimpse() offers a view in the data, i.e. it shows particular measurements of variables for some units. A similar command is head() which better represents the tabular structure of the data, i.e. rows and columns. Since the data is labelled from Stata, head() also shows these labels. head(soep) #&gt; # A tibble: 6 × 9 #&gt; id year sex education no_kids health_org satisf_org health_std #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 312 2004 1 [female] NA 1 4 [good] 7 [7 Sati… 0.567 #&gt; 2 399 2000 0 [male] 12 1 4 [good] 8 [8 Sati… 0.567 #&gt; 3 399 2001 0 [male] 12 1 4 [good] 9 [9 Sati… 0.567 #&gt; 4 457 2000 0 [male] 18 0 3 [satisfactor… 8 [8 Sati… -0.464 #&gt; 5 457 2002 0 [male] 18 0 3 [satisfactor… 7 [7 Sati… -0.464 #&gt; 6 457 2004 0 [male] 18 0 2 [poor] 4 [4 Sati… -1.49 #&gt; # … with 1 more variable: satisf_std &lt;dbl&gt; Sine the coding is 1 for female and 0 for male it is a valid alternative to rename() the variable into a female binary dummy. The logic of the code is this: take soep data and do the following (e.g. %&gt;% pipe operator), rename old variable sex as female. Store the result again in soep, i.e. overwrite the old data. soep &lt;- soep %&gt;% rename(female = sex) It it likely that not all possible labels appear in the first 6 rows. Access labels for categorical data with the attribute function attr(). attr(soep$health_org, &quot;labels&quot;) #&gt; not valid does not concern no answer bad #&gt; -3 -2 -1 1 #&gt; poor satisfactory good very good #&gt; 2 3 4 5 3.4.3 Fly over data Now let’s have a look at summary statistics for the dataset. Summary statistics or Descriptive Statistics often comprise measures of location and spread. The base R function summary() can be applied to the entire soep data. summary() produces results for all variables. The data scientist has to decide whether this makes sense. It is not useful to calculate the mean or median of id. In the following, we will ignore the first two variables and select column 3 to 9 by soep[,(3:9)]. summary(soep) #&gt; id year female education #&gt; Min. : 312 Min. :2000 Min. :0.0000 Min. : 7.00 #&gt; 1st Qu.:166206 1st Qu.:2001 1st Qu.:0.0000 1st Qu.:10.50 #&gt; Median :333851 Median :2002 Median :1.0000 Median :11.50 #&gt; Mean :335619 Mean :2002 Mean :0.5389 Mean :11.87 #&gt; 3rd Qu.:502770 3rd Qu.:2003 3rd Qu.:1.0000 3rd Qu.:13.00 #&gt; Max. :677912 Max. :2004 Max. :1.0000 Max. :18.00 #&gt; NA&#39;s :1468 #&gt; no_kids health_org satisf_org health_std #&gt; Min. :0.0000 Min. :1.000 Min. : 0.000 Min. :-2.525773 #&gt; 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.: 6.000 1st Qu.:-0.463918 #&gt; Median :0.0000 Median :4.000 Median : 7.000 Median : 0.567010 #&gt; Mean :0.6466 Mean :3.455 Mean : 7.156 Mean : 0.005419 #&gt; 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.: 8.000 3rd Qu.: 0.567010 #&gt; Max. :3.0000 Max. :5.000 Max. :10.000 Max. : 1.597938 #&gt; NA&#39;s :906 NA&#39;s :15 NA&#39;s :15 #&gt; satisf_std #&gt; Min. :-4.068182 #&gt; 1st Qu.:-0.659091 #&gt; Median :-0.090909 #&gt; Mean :-0.002265 #&gt; 3rd Qu.: 0.477273 #&gt; Max. : 1.613636 #&gt; The stargazer package (with the option type=\"text\") displays the number of observations, mean, standard deviation, min, max and percentiles to the console or markdown file (it produces a .tex table by default). stargazer requires a dataframe as input. haven created a tibble from the Stata .dta file. Finally, we select all variables but the first two, since they are identifier and any calculation, e.g. the mean of personal IDs, does not make much sense here. library(stargazer) stargazer(as.data.frame(soep)[,(3:9)], type=&quot;text&quot;) #&gt; #&gt; =============================================== #&gt; Statistic N Mean St. Dev. Min Max #&gt; ----------------------------------------------- #&gt; female 12,922 0.539 0.499 0 1 #&gt; education 11,454 11.874 2.469 7.000 18.000 #&gt; no_kids 12,016 0.647 0.931 0 3 #&gt; health_org 12,907 3.455 0.973 1 5 #&gt; satisf_org 12,922 7.156 1.762 0 10 #&gt; health_std 12,907 0.005 1.003 -2.526 1.598 #&gt; satisf_std 12,922 -0.002 1.001 -4.068 1.614 #&gt; ----------------------------------------------- A more modern approach comes from the modelsummary package. The datasummary_skim function tells us the unique number of values, a percentage of missing values, mean, standard deviation, minimum, median, maximum and show a tiny picture of the distribution of the variable. library(modelsummary) datasummary_skim(soep[,(3:9)]) Unique (#) Missing (%) Mean SD Min Median Max female 2 0 0.5 0.5 0.0 1.0 1.0 .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle { fill: none; stroke: #000000; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10.00; } .svglite text { white-space: pre; } education 14 11 11.9 2.5 7.0 11.5 18.0 .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle { fill: none; stroke: #000000; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10.00; } .svglite text { white-space: pre; } no_kids 5 7 0.6 0.9 0.0 0.0 3.0 .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle { fill: none; stroke: #000000; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10.00; } .svglite text { white-space: pre; } health_org 6 0 3.5 1.0 1.0 4.0 5.0 .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle { fill: none; stroke: #000000; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10.00; } .svglite text { white-space: pre; } satisf_org 11 0 7.2 1.8 0.0 7.0 10.0 .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle { fill: none; stroke: #000000; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10.00; } .svglite text { white-space: pre; } health_std 6 0 0.0 1.0 −2.5 0.6 1.6 .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle { fill: none; stroke: #000000; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10.00; } .svglite text { white-space: pre; } satisf_std 11 0 −0.0 1.0 −4.1 −0.1 1.6 .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle { fill: none; stroke: #000000; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10.00; } .svglite text { white-space: pre; } Think about The mean of female is 0.539. What does it tell you? 3.4.4 Missing data datasummary_skim tells that 11 % of education is missing. Missing information is represented by NA in R. Check out again the first call of glimpse() that shows the first entry of education which is missing. NA stand for non available and is the indicator for missing data in R. We ask the table function to count of all values in the data that are either missing or not missing (is.na()). table(is.na(soep)) #&gt; #&gt; FALSE TRUE #&gt; 113894 2404 There are options to deal with missing data. One common approach is substituting values for missing cells, e.g. the mean (imputation). The alternative, for simplicity, is removing all rows which contain a missing value in any column. This is called a complete case analysis. # It is your decision to overwrite soep after a data operation or to create a new data object. soep_no_na &lt;- soep %&gt;% filter(complete.cases(.)) In the following, soep_no_na data is used. 3.4.5 Explore data The count() function provides the number of occurrences for values of a variables. soep_no_na %&gt;% count(year) #&gt; # A tibble: 5 × 2 #&gt; year n #&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2000 3000 #&gt; 2 2001 2248 #&gt; 3 2002 1965 #&gt; 4 2003 1763 #&gt; 5 2004 1683 We observe a decline in observations over time. People drop out of the survey for various reasons. SOEP regularly adds refreshment samples to compensate for this. Sometimes we miss data in between years. panel attrition Person number 457 participated in 2000, 2002 and 2004: soep_no_na %&gt;% filter(id == 457) #&gt; # A tibble: 3 × 9 #&gt; id year female education no_kids health_org satisf_org health_std #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 457 2000 0 [male] 18 0 3 [satisfactory] 8 [8 Sati… -0.464 #&gt; 2 457 2002 0 [male] 18 0 3 [satisfactory] 7 [7 Sati… -0.464 #&gt; 3 457 2004 0 [male] 18 0 2 [poor] 4 [4 Sati… -1.49 #&gt; # … with 1 more variable: satisf_std &lt;dbl&gt; Person 457 was not available in the year 2001 for some reason. Attention with real research data, we never show personal ID. arrange() orders the rows of data by the values of selected columns (from low to high). We can combine arrange() with desc() to order observations from high to low. soep_no_na %&gt;% arrange(desc(no_kids)) #&gt; # A tibble: 10,659 × 9 #&gt; id year female education no_kids health_org satisf_org health_std #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 2878 2000 1 [female] 7 3 4 [good] 7 [7 Sati… 0.567 #&gt; 2 5728 2003 1 [female] 11.5 3 3 [satisfacto… 8 [8 Sati… -0.464 #&gt; 3 5728 2004 1 [female] 11.5 3 3 [satisfacto… 5 [5 Sati… -0.464 #&gt; 4 8741 2000 1 [female] 11 3 4 [good] 5 [5 Sati… 0.567 #&gt; 5 8741 2002 1 [female] 10.5 3 2 [poor] 6 [6 Sati… -1.49 #&gt; 6 8741 2003 1 [female] 10.5 3 4 [good] 4 [4 Sati… 0.567 #&gt; 7 8741 2004 1 [female] 10.5 3 3 [satisfacto… 8 [8 Sati… -0.464 #&gt; 8 10566 2000 0 [male] 10.5 3 5 [very good] 8 [8 Sati… 1.60 #&gt; 9 10566 2001 0 [male] 10.5 3 5 [very good] 8 [8 Sati… 1.60 #&gt; 10 12599 2000 0 [male] 9 3 4 [good] 8 [8 Sati… 0.567 #&gt; # … with 10,649 more rows, and 1 more variable: satisf_std &lt;dbl&gt; soep_no_na %&gt;% group_by(female) %&gt;% summarise(median(education)) #&gt; # A tibble: 2 × 2 #&gt; female `median(education)` #&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 0 [male] 11.5 #&gt; 2 1 [female] 11.5 3.4.6 Standardization Look again at the glimpse() output or stargazer() table. Notice two versions of satisfaction and health, i.e. satisf_org and satisf_std which represent satisfaction on the original scale (from 0 to 10) and a standardized version of satisfaction. Health is ranging from 1 to 5. How can we compare values of satisfaction and health when their range is different? In statistics, standardization is the process of putting different variables on the same scale. This process allows you to compare scores between different types of variables (compare apples with apples instead of apples with bananas). Typically, to standardize variables, you calculate the mean and standard deviation for a variable (cf. z-score). Then, for each observed value of the variable, you subtract the mean and divide by the standard deviation. Consequently, standardized variables have a mean of 0 and a standard deviation of 1. soep_no_na %&gt;% summarise(across(c(satisf_std, health_std), list(mean, sd))) %&gt;% `colnames&lt;-`(c(&quot;mean of std. satis&quot;, &quot;sd of std. satis&quot;, &quot;mean of std. health&quot;, &quot;sd of std. health&quot;)) #&gt; # A tibble: 1 × 4 #&gt; `mean of std. satis` `sd of std. satis` `mean of std. health` `sd of std. he…` #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0.00174 1.00 -0.0102 0.998 Here summarise is asked to apply the mean() and sd() function “across” the two columns satisf_std and health_std. The means are close to zero and the standard deviation is close to one. The minor differences result from our complete case analysis (we already dropped some cases which might have been used for the initial standardization). "],["mean-comparison.html", "Chapter 4 Mean Comparison 4.1 Application 4.2 Student’s t-test 4.3 Plot with Confidence 4.4 Independent t-test 4.5 Dependent t-test", " Chapter 4 Mean Comparison Conceptual Skills: Compare means within and between people. What Student’s t-test has to do with beer. Data Concepts: Factor variables. Data Skills: Data Manipulation: Several options to achieve a goal. Data Analysis: Hypothesis testing with t-Tests. Data Visualization: Error plots. The term mean comparisons refers to the comparison of the average of one or more continuous variables over one or more categorical variables. It is a general term that can refer to a large number of different research questions and study designs. For example, one can compare the mean from one sample of data to a hypothetical population value, compare the means on a single variable from multiple independent groups, or compare the means for a single variable for one sample over multiple measurement occasions. In addition, more complex research designs can employ multiple continuous dependent variables simultaneously, as well as a combination of multiple groups and multiple measurement occasions. Overall, mean comparisons are of central interest in any experimental design and many correlational designs. The mean usually refers to the arithmetic mean. Together with the geometric and the harmonic mean it satisfies the relationship \\(\\mathrm{AM} \\ge \\mathrm{GM} \\ge \\mathrm{HM}\\). The arithmetic mean is calculated as: \\(\\bar{x} = \\frac{1}{n}\\left (\\sum_{i=1}^n{x_i}\\right ) = \\frac{x_1+x_2+\\cdots +x_n}{n}\\) For example, the arithmetic mean of five values: 4, 36, 45, 50, 75 is: \\(\\dfrac{4+36+45+50+75}{5} = \\dfrac{210}{5} = 42.\\) 4.1 Application 4.1.1 Data Preparation Load SOEP practice data from Github repository directly into memory. library(haven) soep &lt;- read_dta(&quot;https://github.com/MarcoKuehne/seminars_in_applied_economics/blob/main/Data/soep_lebensz_en.dta?raw=true&quot;) ## Complete case study library(tidyverse) soep &lt;- soep %&gt;% filter(complete.cases(.)) ## Subset the year 2000 soep_2000 &lt;- subset(soep, year == 2000) # ## Fixing factors # soep_2000$sex_factor &lt;- as.factor(soep_2000$sex) # levels(soep_2000$sex_factor) &lt;- c(&quot;male&quot;, &quot;female&quot;) # # ## Convert Stata format # library(sjlabelled) # soep_2000 &lt;- remove_all_labels(soep_2000) 4.1.2 Grouped Mean There are several options to calculate means per group. ## TAPPLY means1 &lt;- tapply(soep_2000$health_org, INDEX=soep_2000$sex, FUN=mean) means1 #&gt; 0 1 #&gt; 3.509326 3.462017 ## AGGREGATE means2 &lt;- aggregate(health_org~sex, soep_2000, mean) means2 #&gt; sex health_org #&gt; 1 0 3.509326 #&gt; 2 1 3.462017 ## BY means3 &lt;- by(soep_2000$health_org, soep_2000$sex, mean) means3 #&gt; soep_2000$sex: 0 #&gt; [1] 3.509326 #&gt; ------------------------------------------------------------ #&gt; soep_2000$sex: 1 #&gt; [1] 3.462017 The class(means1) is an array, class(means3) is by. means2 is a dataframe. None of these base R functions reminds of what the values 0 and 1 stand for. The tidyverse package makes use of built in labels. ## DPLYR pipe library(tidyverse) means4 &lt;- soep_2000 %&gt;% group_by(sex)%&gt;% summarize(means = mean(health_org)) means4 #&gt; # A tibble: 2 × 2 #&gt; sex means #&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 0 [male] 3.51 #&gt; 2 1 [female] 3.46 4.1.3 Furious with Factors In order to make labels nice and usable, define sex as a factor variable. A factor variable is a variable used for categorical data. Some categories are ordered (e.g. small, medium, large), some are not (e.g. men, women). An integer or string can be converted to a factor. Factors have hidden levels. Several R functions and packages treat factors fundamentally different from integers. When R handles sex as an integer, it assumes that values such as sex=-3 and sex=1.5 are possible. This is what happens to numbers. gender_numbers &lt;- c(0, 1, 0, 1, 1) summary(gender_numbers) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 0.0 0.0 1.0 0.6 1.0 1.0 A mean can be calculated. Compare to character coding. gender_words &lt;- c(&quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;female&quot;) summary(gender_words) #&gt; Length Class Mode #&gt; 5 character character Now, convert the gender variable to a factor and calculate the mean again. soep_2000$sex_factor &lt;- as.factor(soep_2000$sex) levels(soep_2000$sex_factor) &lt;- c(&quot;male&quot;, &quot;female&quot;) means &lt;- tapply(soep_2000$health_org, INDEX=soep_2000$sex_factor, FUN=mean) means #&gt; male female #&gt; 3.509326 3.462017 The average health status is higher for men in comparison to women in the data. What can we learn from this difference? Is it small or large? Is it a cause for concern? How can we become more confident of the result? We do a statistical test that compares the means. Hypothesis testing in statistics is a way to test the results of a survey or experiment to see if there are meaningful results. It’s basically testing whether the results are valid by figuring out the odds that the results have happened by chance. If the results may have happened by chance, the experiment won’t be repeatable and so has little use. 4.2 Student’s t-test What this has do to with beer. Student’s t-test or simply t-test was published W.S. Gossett who hid his name due to his position as a worker in a brewery company (Guiness Brewery Dublin). The t.test() in R takes a formula and data as input. The relationship between health_org and sex is specified as health_org ~ sex, i.e. explain or calculate the health_org by sex (if other way around, R returns an error message). t.test(health_org ~ sex, data=soep_2000) #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: health_org by sex #&gt; t = 1.3118, df = 2968.8, p-value = 0.1897 #&gt; alternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.02340655 0.11802305 #&gt; sample estimates: #&gt; mean in group 0 mean in group 1 #&gt; 3.509326 3.462017 Look at the output of the t-test: The so called t-statistic is 1.3117519 The degrees of freedom are 2968.8493968 The p-value of 0.1897053 The 95% confidence interval is [-0.0234066;0.118023] The t-statistic is at the heart of this hypothesis test. The t value has to be compared to a critical value in a t table to decide whether or not to reject the null hypothesis (H0). The null states: Move along, there’s nothing to see here! The p-value can be seen as easy-alternative to the t-statistic. You probably never look up critical t values, do you? If you just want to glimpse at it, here is one. We are looking forward getting small p-values (smaller than 0.05 by convention). If p &lt; 0.05 we say that we reject the null and conclude that there is actually something going on! If a p value is less than 0.05, the result is called statistically significant. The 95% confidence interval (CI) is another way of looking at the same issue. 95% of the values should be in the interval 0.1 to 0.3. Thus if zero is not in the CI we can be pretty sure that something is going on. Degrees of freedom prefer to keep an air of mystery about them. Actually there a several different versions of the t.test and t.test() tells you that it’s a Welch Two Sample t-test. Unfortunately, Bernard Lewis Welch did not work for a Brewery company. The Welch’s t-test (or unequal variances t-test), is a two-sample location test which is used to test the hypothesis that two populations have equal means when the assumption of equal variances is dropped. 4.3 Plot with Confidence Time to plot. In addition to the group means we plot confidence intervals using the gplots package with the plotmeans() function. The result is this: plotmeans() nicely presents the number of observations and labels by default. There is a statistically significant difference, when confidence intervals not overlap. Conclusion: Don’t worry about the health differential. 4.4 Independent t-test Now we learn about two different versions of the two sample t-test: Independent (or unpaired) t-test Dependent (or paired or repeated) t-test There is a one sample t-test which does not help much for group comparison. You can read more about Unpaired and paired two-sample t-tests. The first t.test on health between gender was unpaired since the default option is paired=FALSE. We used the unpaired t-test for gender, since men and women are independent in the sense of statistical samples (though this may be different in other relationships). For the next calculation we create another subsample and focus on all women who are observed in 2000 and 2004. We can compare women to men. We can compare women to themselves. women_before_after &lt;- soep %&gt;% filter(sex == 1) %&gt;% ## filter all males filter(year == 2000 | year == 2004) %&gt;% ## only use year 2000 or 2004 group_by(id) %&gt;% ## look at id groups filter(n() == 2) ## only keep groups with exactly two observations/rows The unpaired t-test on women’s health is: t.test(health_org ~ year, data=women_before_after, paired=FALSE) #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: health_org by year #&gt; t = 3.6158, df = 1629.9, p-value = 0.0003085 #&gt; alternative hypothesis: true difference in means between group 2000 and group 2004 is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 0.07850093 0.26463633 #&gt; sample estimates: #&gt; mean in group 2000 mean in group 2004 #&gt; 3.497549 3.325980 It looks like women have been significantly more healthy in 2000 than in 2004. Can you think of a reason? What happened to all those women? 4.5 Dependent t-test Now run the t.test as paired=TRUE. t.test(health_org ~ year, data=women_before_after, paired=TRUE) #&gt; #&gt; Paired t-test #&gt; #&gt; data: health_org by year #&gt; t = 5.7026, df = 815, p-value = 1.65e-08 #&gt; alternative hypothesis: true mean difference is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 0.1125131 0.2306242 #&gt; sample estimates: #&gt; mean difference #&gt; 0.1715686 The paired t-test is a little bit more exiting in the way that we need data on something observed at two different points in time. In this before-and-after scenario, the person serves as something like its own control group. We’ll come back to that. The mean difference is exactly the same (can you see it? - ask your console to calculate the difference between 3.497549 and 3.325980). But all the other statistics seem to be different: t-value, degree of freedom, p-value … In this scenario the mean difference from the paired=TRUE and paired=FALSE test are identical. But using the information from the paired sample (one person observed for two periods), the t-value became higher and thus the p-value lower. In a nutshell, we gained more statistical confidence in our estimate! Once more we saw how valuable time is. We explore this in more detail in the next chapter. Now, you can call yourself … "],["panel-data.html", "Chapter 5 Panel Data 5.1 Learning Goals 5.2 Paneldata 5.3 Data Preparation 5.4 Group by person 5.5 Data Visualization 5.6 Within and Between Variation", " Chapter 5 Panel Data 5.1 Learning Goals Conceptual Skills: Understand panel data. Panel attrition. Distinguish between and within variation. Compare the paired and unpaired t-Test to panel data. Data Skills: How set.seed() defeats randomness. Find and use functions from other people. Tidyverse e.g. group_by(), sample_n(), summarize(), count(), arrange(). Data Visualization: Panel plots (time series per group). 5.2 Paneldata Panel data are observations for the same subjects over time. Subjects can be people, households, firms or countries. Panel data are a subset of longitudinal data. Key components are the panel identifier: person (id) and time (year). Every row is a person-year combination (so called long format). Compare these types of data: Cross-section: One time measurement. Repeated cross-section: Different people. Panel: Repeated observations of the same individuals. Figure 5.1: Table 1: Types of Data. Panel data allows for special statistical analyses, e.g. fixed effects regression. With panel data we know the time-ordering of events. Panel data allow to identify causal effects under weaker assumptions (compared to cross-sectional data). Different types of data can answer different types of questions: Levels: How many people are poor in 2016 in Germany? Trends: Has poverty increased or decreased? Change: How many people went in and out of poverty? The unemployment rate in Germany is about 5 % over the last few years (Source: Annual average unemployment rate in Germany from 2005 to 2022). Imagine a college graduate enters the job market. It takes about 3 month to search for jobs, send applications and do the job interviews. Finally she finds a perfect match. After some years the college graduate falls in love with someone who lives in another city, so the student moves to this city, again looking for a job at a new employer. Imagine another college graduate. He sends 5 applications for various jobs per week. He has several mini jobs to keep afloat. The student realizes that he did not acquire the skills that are expected on the job market. After 2 years, he finally finds a suitable position. Do you think that is a cause for concern? Life after collage. alt text Panel data allows to analyze the level of unemployment in Germany as well as the changes and trajectories of individuals. We can separate a frictional unemployment component and a permanent unemployment share. Frictional unemployment is a form of unemployment reflecting the gap between someone voluntarily leaving a job and finding another. As such, it is sometimes called search unemployment. Do we accept search unemployment? Is it different from long-term unemployment? What do you think. Some famous household panel data studies are: United States: Panel Study of Income Dynamics (PSID) since 1968 Germany: Socio-Economic Panel (SOEP) since 1984 United Kingdom: British Household Panel Survey (BHPS) since 1991 Australia: Household, Income and Labour Dynamics in Australia Survey (HILDA) since 2001 These scientific datasets can often be analyzed for research and student theses free of charge. 5.3 Data Preparation Load SOEP practice data from web into temporal memory and into R. library(haven) soep &lt;- read_dta(&quot;https://github.com/MarcoKuehne/seminars_in_applied_economics/blob/main/Data/soep_lebensz_en.dta?raw=true&quot;) 5.4 Group by person group_by() is a powerful command, especially when working with panel data. Use count() after group_by() to get the number of observations of each person (id) in the data: library(tidyverse) head(soep %&gt;% group_by(id) %&gt;% count()) See result. #&gt; # A tibble: 6 × 2 #&gt; # Groups: id [6] #&gt; id n #&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 312 1 #&gt; 2 399 2 #&gt; 3 457 3 #&gt; 4 748 1 #&gt; 5 761 2 #&gt; 6 1044 5 Adding arrange() means sorting the data by a variable (i.e. the n) either ascending or descending (from high to low). soep %&gt;% group_by(id) %&gt;% count() %&gt;% arrange(desc(n)) See result. #&gt; # A tibble: 3,550 × 2 #&gt; # Groups: id [3,550] #&gt; id n #&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 1044 5 #&gt; 2 1300 5 #&gt; 3 1343 5 #&gt; 4 1889 5 #&gt; 5 2160 5 #&gt; 6 2241 5 #&gt; 7 3240 5 #&gt; 8 3535 5 #&gt; 9 3787 5 #&gt; 10 4107 5 #&gt; # … with 3,540 more rows Note that the output further tells you # A tibble: 3,550 x 2, i.e. there are 3550 ID-groups (or units or people). Remember that the observation period is between 2000 and 2004, i.e. min is 1 year, max is 5 years. #&gt; #&gt; 2000 2001 2002 2003 2004 #&gt; 3198 2690 2485 2299 2250 Attrition is the process of dropout from a panel study. How many people are observed in all years? Filter for a specific n and check the tibble size again. soep %&gt;% group_by(id) %&gt;% count() %&gt;% filter(n == 5) See result. #&gt; # A tibble: 1,851 × 2 #&gt; # Groups: id [1,851] #&gt; id n #&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 1044 5 #&gt; 2 1300 5 #&gt; 3 1343 5 #&gt; 4 1889 5 #&gt; 5 2160 5 #&gt; 6 2241 5 #&gt; 7 3240 5 #&gt; 8 3535 5 #&gt; 9 3787 5 #&gt; 10 4107 5 #&gt; # … with 1,841 more rows 5.5 Data Visualization 5.5.1 Average Health per Year A picture is worth a thousand words. Show a time trend or a relationship at the beginning of your analysis. People fancy plots. Your plot should be interesting and easy to understand. If you think obesity or crime is a problem for society and it’s increasing over time you made a good point of why we should talk about it or analyze it more thoroughly. Actually, after months and years of empirical research, the results often can be summarized in one single plot. Health status in Germany is stable. 5.5.2 Individual Health per Year Next, we dig deeper into personal health stories. 5.5.2.1 Random Panel Sample Let’s use sample_n() for random selection of observations. Each time this command is run, a different random set of observations is drawn. Note that these 5 random observations/rows do not stem from the same people. soep %&gt;% sample_n(5) #&gt; # A tibble: 5 × 9 #&gt; id year sex education no_kids health_org satisf_org health_std #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 306396 2004 1 [female] 9 0 3 [satisfacto… 8 [8 Sati… -0.464 #&gt; 2 761 2001 1 [female] 16 2 3 [satisfacto… 7 [7 Sati… -0.464 #&gt; 3 237338 2001 0 [male] 11.5 0 3 [satisfacto… 8 [8 Sati… -0.464 #&gt; 4 503799 2000 0 [male] 11.5 1 4 [good] 7 [7 Sati… 0.567 #&gt; 5 636028 2001 1 [female] 11.5 2 4 [good] 7 [7 Sati… 0.567 #&gt; # … with 1 more variable: satisf_std &lt;dbl&gt; If you plant a seed with set.seed randomness becomes reproducible. set.seed(42) soep %&gt;% sample_n(5) #&gt; # A tibble: 5 × 9 #&gt; id year sex education no_kids health_org satisf_org health_std #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 564721 2001 1 [female] 11.5 0 4 [good] 8 [8 Sati… 0.567 #&gt; 2 643474 2003 0 [male] NA 2 4 [good] 7 [7 Sati… 0.567 #&gt; 3 121058 2003 1 [female] 10.5 0 3 [satisfacto… 5 [5 Sati… -0.464 #&gt; 4 268036 2004 1 [female] NA 0 3 [satisfacto… 9 [9 Sati… -0.464 #&gt; 5 481638 2004 0 [male] 11.5 2 4 [good] 8 [8 Sati… 0.567 #&gt; # … with 1 more variable: satisf_std &lt;dbl&gt; 5.5.2.2 Personalize Functions Is there a sample_n_groups command in the tidyverse? Unfortunately not. Even in such a case, it’s unlikely that you need to invent something new. One of the first Google hits is: https://cmdlinetips.com/2019/07/how-to-randomly-select-groups-in-r-with-dplyr/ and they suggest: sample_n_groups = function(grouped_df, size, replace = FALSE, weight=NULL) { grp_var &lt;- grouped_df %&gt;% groups %&gt;% unlist %&gt;% as.character random_grp &lt;- grouped_df %&gt;% summarise() %&gt;% sample_n(size, replace, weight) %&gt;% mutate(unique_id = 1:NROW(.)) grouped_df %&gt;% right_join(random_grp, by=grp_var) %&gt;% group_by_(grp_var) } If you run this chunk the function sample_n_groups appears in the right upper panel in RStudio. Now you can use this particular function in your current session. Don’t worry, you don’t have to understand everything from the code provided by others, but make sure that it behaves the way you expect it to. Since this function is based on dplyr commands you can use it within a pipe chain, e.g. pipe it into a ggplot. set.seed(42+42) soep %&gt;% group_by(id) %&gt;% sample_n_groups(3) %&gt;% # select all given observations across time for 5 people ggplot(aes(x = year, y = health_org, group=as_factor(id), color=as_factor(id))) + geom_line() + geom_point() + labs(title=&quot;Health Status per Person&quot;, x=&quot;Year&quot;, y=&quot;Health Status&quot;, color=&quot;Person&quot;) + ylim(1,5) This is test data from the practice data set. It might be helpful to understand what people we selected to compare our code results. Working with real questionnaire data, next show personal information. If you really need a graph like this, drop the legend. Never show person IDs in a report. 5.5.2.3 Minimum Observations per Group The full potential of panel data is to track people over time. We can literally follow people from graduation, to their first job, marriage, first child and buying yourself a house. But we hardly see that from the previous plot for all people. We select randomly 3 people who are observed at least 3 times and plot their life satisfaction over time in a line plot (again, there are several options). set.seed(42+42) soep %&gt;% group_by(id) %&gt;% filter(n()&gt;=3) %&gt;% # the moment we drop some data sample_n_groups(3) %&gt;% # select all given observations across time for 3 people ggplot(aes(x = year, y = health_org, col=factor(id))) + geom_line() + geom_point() + # add points connected by lines labs(title=&quot;Health Status over Time by Person&quot;, subtitle=&quot;Random Sample of 3 People with at least 3 observations.&quot;, x=&quot;Year&quot;, y=&quot;Health Status&quot;, colour=&quot;Person&quot;) + # give some illustrative labels ylim(1,5) # limit the scale always to all possible values, to prevent random misperceptions 5.6 Within and Between Variation Here is a similar plot of life satisfaction for selected people. Person 293973 reports a dramatic change in satisfaction from one year to another. Starting from perfect happiness in 2000 (= 10), it drops to complete misery (= 0) and recovers immediately in 2002 (= 10). Is person 293973 an outlier? Can you think of reasonable scenarios behind the data? Job’s news: take away all that a person holds dear, including children, health, and property. Because this is practice data and we cannot dig deeper into life events potentially triggering these changes. Look at the previous graph from this perspective: Within variation: Within means per individual, group or unit over time. Between variation: Between means comparing individuals, groups or units (both at a point in time or over time). In 2000 person 293973 and person 317284 both reported a happiness value of 10. In 2000, there is no difference between those two people. In 2001 though, 293973 experienced a critical shock and dropped to 0 while 317284 stayed at the very same value of 10. In 2001, the difference between both is 10. Compare the years 2000 and 2001 for person 293973. The value changes within that person by -10, whereas there is no change for person 317284. You often read about changes within people (across time) and about differences between them. In the line plot, within changes happens along the horizontal x-axis, whereas between differences can be measured as the vertical distance on the y-axis. Between and within variation are new properties of a panel data variable. To fully exploit panel data, we need enough within variation. Is there enough within variation? Figure 5.2: Figure 2: Screenshot from a lecture script of Brüderl and Ludwig. The software is Stata. 5.6.1 XTSUM (from Stata) In Stata there is a command xtsum which calculates overall, between and within variation. This is not implemented in any R package so far. Still, clever people created another personal function on Stack Overflow https://stackoverflow.com/questions/49282083/xtsum-command-for-r: Show me the crazy xtsum code. # Again, copy the code and run it, and you can use it in your R session. library(rlang) XTSUM &lt;- function(data, varname, unit) { varname &lt;- enquo(varname) loc.unit &lt;- enquo(unit) ores &lt;- data %&gt;% summarise(ovr.mean=mean(!! varname, na.rm=TRUE), ovr.sd=sd(!! varname, na.rm=TRUE), ovr.min = min(!! varname, na.rm=TRUE), ovr.max=max(!! varname, na.rm=TRUE), ovr.N=sum(as.numeric((!is.na(!! varname))))) bmeans &lt;- data %&gt;% group_by(!! loc.unit) %&gt;% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname)))) bres &lt;- bmeans %&gt;% ungroup() %&gt;% summarise(between.sd = sd(meanx, na.rm=TRUE), between.min = min(meanx, na.rm=TRUE), between.max=max(meanx, na.rm=TRUE), Units=sum(as.numeric(!is.na(t.count))), t.bar=mean(t.count, na.rm=TRUE)) wdat &lt;- data %&gt;% group_by(!! loc.unit) %&gt;% mutate(W.x = scale(!! varname, scale=FALSE)) wres &lt;- wdat %&gt;% ungroup() %&gt;% summarise(within.sd=sd(W.x, na.rm=TRUE), within.min=min(W.x, na.rm=TRUE), within.max=max(W.x, na.rm=TRUE)) return(list(ores=ores,bres=bres,wres=wres)) } We can use this functionality to compare our prior results. library(sjlabelled) minipanel &lt;- soep %&gt;% filter(id %in% c(293973,317284)) %&gt;% remove_all_labels() XTSUM(minipanel, varname=satisf_org, unit=id) #&gt; $ores #&gt; ovr.mean ovr.sd ovr.min ovr.max ovr.N #&gt; 1 8.625 3.50255 0 10 8 #&gt; #&gt; $bres #&gt; # A tibble: 1 × 5 #&gt; between.sd between.min between.max Units t.bar #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2.22 6.67 9.8 2 4 #&gt; #&gt; $wres #&gt; # A tibble: 1 × 3 #&gt; within.sd within.min within.max #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 3.10 -6.67 3.33 XTSUM tells us some more results. The overall mean is 8.62 as expected. The overall smallest value of satisfaction is 0, the highest is 10. We saw this in the graph. We have N=8 observations or rows. But we only have n=2 units (see the medium panel). Units (people) are observed on average for t.bar = 4 periods (one person 3 years, one person 5 years, makes 4 years on average). Standard deviation sd is at the core of within and between variation (since it is a measure of dispersion or variation). In the previous graph, we focused on within changes and between differences. Think about examples (i.e. variables) that you expect to not have within variation. Run XTSUM() on different variables to test your knowledge. "],["text-mining.html", "Chapter 6 Text Mining 6.1 Learning Goals 6.2 Get Text 6.3 Translate Everything To English 6.4 Text Analysis 6.5 Little bit of Scraping", " Chapter 6 Text Mining 6.1 Learning Goals Conceptual Skills: What text data is and where to get text data from. What API is and how to use an API inside R. What tidy (text) data format is. Data Skills: Install packages from GitHub via devtools. Clean text data with tidytext, e.g. str_remove_all(), str_to_lower(), str_trim(). Create tidy text format with unnest_tokens() Removing stop words anti_join(). Data Visualization: Term Frequency as Wordcloud and barchart. Text data usually consists of documents which can represent words, sentences or even paragraphs of free flowing text. The inherent unstructured (no neatly formatted data columns!) and noisy nature of textual data makes it harder for data analysts to directly work on raw text data. This material also introduces new features for R markdown reports: Code Folding https://bookdown.org/yihui/rmarkdown-cookbook/fold-show.html Tab Sets https://bookdown.org/yihui/rmarkdown-cookbook/html-tabs.html In your YAML header you can set an option under html_document: like code_folding: hide. Be aware of the necessary spacing in the html options. You can add the {.tabset} option to a headline and starting tab setting here. You end tab setting by an empty headline like #### {-}. In between you need to specify sub-headlines (at least one more hash-tag). 6.2 Get Text 6.2.0.1 Text datasets There are various built-in datasets for text (e.g. janeaustenr package). 6.2.0.1.0.1 Jane Austin books This table gives a list of all the Jane Austin books included and their rownumbers. library(janeaustenr) table(austen_books()$book) #&gt; #&gt; Sense &amp; Sensibility Pride &amp; Prejudice Mansfield Park Emma #&gt; 12624 13030 15349 16235 #&gt; Northanger Abbey Persuasion #&gt; 7856 8328 6.2.0.1.0.2 Select a specific book. You can read entire books in R. library(tidyverse) austen_books() %&gt;% filter(book == &quot;Emma&quot;) %&gt;% filter(row_number() &gt; 10, row_number() &lt; 20) #&gt; # A tibble: 9 × 2 #&gt; text book #&gt; &lt;chr&gt; &lt;fct&gt; #&gt; 1 &quot;&quot; Emma #&gt; 2 &quot;CHAPTER I&quot; Emma #&gt; 3 &quot;&quot; Emma #&gt; 4 &quot;&quot; Emma #&gt; 5 &quot;Emma Woodhouse, handsome, clever, and rich, with a comfortable home&quot; Emma #&gt; 6 &quot;and happy disposition, seemed to unite some of the best blessings of&quot; Emma #&gt; 7 &quot;existence; and had lived nearly twenty-one years in the world with ver… Emma #&gt; 8 &quot;little to distress or vex her.&quot; Emma #&gt; 9 &quot;&quot; Emma 6.2.0.2 Ask people: Digital Literacy at Viadrina We ask people for their data, opinion or evaluation. Quick polls and questionnaires can be build in various software, like Zoom or Google.6 There are various provider for more sophisticated surveys (useful in research and theses), e.g. SoSci Survey or SurveyMonkey.7 6.2.0.2.0.1 Open Question 6.2.0.2.0.2 All the data Feather is a file format that can read and write faster. Storage is often reduced. The arrow package cannot read files from a web source (http). Download the file and use a local absolute or relative path to the data. library(arrow) digital &lt;- read_feather(&quot;data/Digital_Literacy_EN.feather&quot;) library(tidyverse) glimpse(digital) #&gt; Rows: 77 #&gt; Columns: 12 #&gt; $ Research &lt;int&gt; 5, 5, 4, 4, 5, 4, 4, 5, 4, 2, 4, 4, 2, 4, 4, 5, 3, 4, 5, 3… #&gt; $ Interaction &lt;int&gt; 5, 5, 3, 4, 1, 5, 4, 5, 5, 5, 5, 5, 5, 3, 4, 5, 4, 4, 5, 4… #&gt; $ Identity &lt;int&gt; 3, 3, 3, 4, 3, 4, 2, 5, 5, 5, 3, 4, 4, 3, 4, 5, 2, 4, 5, 4… #&gt; $ Content &lt;int&gt; 5, 4, NA, 3, 3, 4, 2, 4, 4, 1, 3, 4, 4, 4, 2, 3, 2, 4, 3, … #&gt; $ Privacy &lt;int&gt; 4, 3, 2, 2, 5, 3, 2, 5, 4, 3, 4, 4, 3, 2, 1, 2, 2, 5, 3, 4… #&gt; $ Problems &lt;int&gt; 3, 2, 1, 4, 3, 2, 2, 5, 3, 4, 4, 3, 3, 2, 3, 4, 4, 5, 2, 3… #&gt; $ Teaching &lt;int&gt; 2, 4, 3, 4, 5, 1, 3, 5, 5, 5, 3, 4, 5, 4, 1, 5, 2, 5, 4, 4… #&gt; $ Skills &lt;chr&gt; &quot;Excel&quot;, &quot;Neben den grundlegenden Komputerkentnissen noch … #&gt; $ Faculty &lt;fct&gt; Econ, Econ, Econ, Econ, Econ, Econ, Econ, Econ, Econ, Econ… #&gt; $ Level &lt;chr&gt; &quot;Master&quot;, &quot;Master&quot;, &quot;Master&quot;, &quot;Bachelor&quot;, &quot;Bachelor&quot;, &quot;Bac… #&gt; $ Gender &lt;fct&gt; Female, Male, Female, Female, Female, Male, Male, Female, … #&gt; $ Skills_EN &lt;chr&gt; &quot;Excel&quot;, &quot;Besides the basic computer skills, some basic kn… 6.2.0.2.0.3 The Open Answers In the digital data there are German and English answers to the question what digital competencies are required by students at Viadrina. head(digital$Skills) #&gt; [1] &quot;Excel&quot; #&gt; [2] &quot;Neben den grundlegenden Komputerkentnissen noch eininge Grundkentnissen von Microsoft und Google Leistungen (MS Office, Google drive etc.). Außerdem gibt&#39;s an Viadrina keine hohe digitale Voraussetzungen. &quot; #&gt; [3] &quot;&quot; #&gt; [4] &quot;Ganz viel, ich habe das Gefühl dass meine Mitstudierenden keine Ahnung haben wie man richtig mit digitalen Medien umgeht und auch Programmen wie Office&quot; #&gt; [5] &quot;&quot; #&gt; [6] &quot;Digital research, Data visualisation / Content creation, Digital security and Legal literacy in the respective area&quot; 6.3 Translate Everything To English 6.3.0.1 Deepl API Use Deepl to translate all German responses in digital$Skills into English. There are options: Use website manually https://www.deepl.com/translator Use Deepl API and R in a programmatic way https://www.deepl.com/pro##developer An application programming interface (API) is another piece of software that connects computer programs. It is a type of software interface, offering a service to other pieces of software. Registration for the track DeepL API Free at https://www.deepl.com/pro##developer requires credit card information for identity check (but no payment). The documentation tells what is included in this pricing model: DeepL API Free is a variant of our DeepL API Pro plan that allows developers to translate up to 500,000 characters per month for free. https://support.deepl.com/hc/en-us/articles/360021200939-DeepL-API-Free 6.3.0.2 Deeplr Use deeplr, a package that offers an interface to the Deepl API (use free version). Some packages are not yet released on the official CRAN server. Good packages can be found on GitHub. https://github.com/zumbov2/deeplr Use devtools to install this package from the GitHub repo. The aim of devtools is to make package development easier by providing R functions that simplify and expedite common tasks. #install.packages(&quot;devtools&quot;) #devtools::install_github(&quot;zumbov2/deeplr&quot;) Using the API inside R requires at least one authentication key (password). Do not show or store your auth keys in a script. deeplr::usage2(&quot;KEY&quot;) #&gt; $character_count #&gt; [1] 0 #&gt; #&gt; $character_limit #&gt; [1] 500000 ## deeplr::translate2( ## text = &quot;R ist eine freie Programmiersprache für statistische Berechnungen und Grafiken. Sie wurde 1992 von Statistikern für Anwender mit statistischen Aufgaben neu entwickelt.&quot;, ## target_lang = &quot;EN&quot;, ## auth_key = &quot;KEY&quot; ## ) #&gt; [1] &quot;R is a free programming language for statistical calculations and graphics. It was newly developed in 1992 by statisticians for users with statistical tasks.&quot; 6.4 Text Analysis For this analysis we focus on the intro information on R from English Wikipedia. library(wikifacts) R_EN &lt;- wiki_define(&#39;R (programming language)&#39;) R_EN #&gt; R (programming language) #&gt; &quot;R is a programming language for statistical computing and graphics supported by the R Core Team and the R Foundation for Statistical Computing. Created by statisticians Ross Ihaka and Robert Gentleman, R is used among data miners, bioinformaticians and statisticians for data analysis and developing statistical software. Users have created packages to augment the functions of the R language.\\nAccording to user surveys and studies of scholarly literature databases, R is one of the most commonly used programming languages used in data mining. As of March 2022, R ranks 11th in the TIOBE index, a measure of programming language popularity, in which the language peaked in 8th place in August 2020.The official R software environment is an open-source free software environment within the GNU package, available under the GNU General Public License.&quot; 6.4.0.1 Cleaning Load the tidytext package. We summarize individual tasks like removing digits, punctuation, whitespaces and seting everything to lower case in the clean_text() function. There is a newline operator \\n left. You can replace it with uncommenting the last command. library(tidytext) ## text cleaning clean_text &lt;- function(x) { x %&gt;% ## Remove digits str_remove_all(&quot;[:digit:]&quot;) %&gt;% ## Remove punctuation str_remove_all(&quot;[[:punct:]]&quot;) %&gt;% ## Make everything lowercase str_to_lower() %&gt;% ## Remove any trailing whitespace around the text str_trim(&quot;both&quot;) ##%&gt;% ##str_replace_all(&quot;[\\r\\n]&quot; , &quot; &quot;) } #&gt; [1] &quot;r is a programming language for statistical computing and graphics supported by the r core team and the r foundation for statistical computing created by statisticians ross ihaka and robert gentleman r is used among data miners bioinformaticians and statisticians for data analysis and developing statistical software users have created packages to augment the functions of the r language\\naccording to user surveys and studies of scholarly literature databases r is one of the most commonly used programming languages used in data mining as of march r ranks th in the tiobe index a measure of programming language popularity in which the language peaked in th place in august the official r software environment is an opensource free software environment within the gnu package available under the gnu general public license&quot; 6.4.0.2 Tidytext Format Tidy data has a specific structure: Each variable is a column Each observation is a row We thus define the tidy text format as being a table with one-token-per-row. A token is a meaningful unit of text, such as a word, that we are interested in using for analysis, and tokenization is the process of splitting text into tokens. tidytext &lt;- R_EN_clean %&gt;% as_tibble() %&gt;% unnest_tokens(word, value) %&gt;% count(word, sort=TRUE) head(tidytext) #&gt; # A tibble: 6 × 2 #&gt; word n #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 the 10 #&gt; 2 r 8 #&gt; 3 and 6 #&gt; 4 in 5 #&gt; 5 of 5 #&gt; 6 is 4 6.4.0.3 Stopwords Stop words are a set of commonly used words in a language. Examples of stop words in English are “a”, “the”, “is”, “are” and etc. Stop words are commonly used in Text Mining and Natural Language Processing (NLP) to eliminate words that are so commonly used that they carry very little useful information. data(stop_words) tidytext &lt;- tidytext %&gt;% anti_join(stop_words) head(tidytext) #&gt; # A tibble: 6 × 2 #&gt; word n #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 language 4 #&gt; 2 data 3 #&gt; 3 programming 3 #&gt; 4 software 3 #&gt; 5 statistical 3 #&gt; 6 computing 2 6.4.0.4 Term Frequency Word clouds (also known as text clouds or tag clouds) work in a simple way: the more a specific word appears in a source of textual data (such as a speech, blog post, or database), the bigger and bolder it appears in the word cloud. 6.5 Little bit of Scraping library(rvest) read_html(&quot;https://en.wikipedia.org/wiki/R_(programming_language)&quot;) %&gt;% ## extract paragraphs html_nodes(&quot;p&quot;) %&gt;% ## extract text html_text() %&gt;% ## clean clean_text() %&gt;% as_tibble() %&gt;% ## tidy text unnest_tokens(word, value) %&gt;% count(word, sort=TRUE) %&gt;% ## stopwords anti_join(stop_words) %&gt;% ## select first top_n(20) %&gt;% ## reorder mutate(word = reorder(word, n)) %&gt;% ## create frequency plot ggplot(aes(x=word, y = n)) + geom_col() + coord_flip() + ggtitle(&quot;Term Frequency of top 20 clean words in Wikipedia aRticle&quot;) https://www.google.de/intl/en/forms/about/↩︎ See https://www.soscisurvey.de/ and https://www.surveymonkey.de/↩︎ "],["relationships.html", "Chapter 7 Relationships 7.1 Minimal Example 7.2 Application", " Chapter 7 Relationships “[M]y ally is the Force, and a powerful ally it is. Life creates it, makes it grow. Its energy surrounds us, binds us. Luminous beings are we, not this crude matter. You must feel the Force flow around you. Here, between you, me, the tree, the rock, yes, even between the land and the ship.” Yoda. – Episode V: The Empire Strikes Back The most interesting research questions in social science are about statistical relationships between variables. How can we make a relation between the tree and the land palpable? Relationships are measured via covariance or correlation. The relation between two variables may be expressed in a scatter plot. 7.1 Minimal Example Here is some data. x=c(4,13,19,25,29) y=c(10,12,28,32,38) 7.1.1 Variance The variance is defined as the average quadratic deviation from the mean. \\[var(x) = \\frac{1}{n-1} \\sum (x_i - \\overline{x} )^2\\] The variance of x is 98 and can be calculated via var() in R. # Built-in command var(x) #&gt; [1] 98 The variance of x can be calculated from its components in R as a combination of sum(), mean() and length(). # Variance by hand sum( (x-mean(x))^2 )/(length(x) - 1) #&gt; [1] 98 The standard deviation is derived from variance and tells, on average, how far each value lies from the mean. It’s the square root of variance. Variance and standard deivation measure the variability of a variable. For the truly dedicated. When you have collected data from every member of the population that you’re interested in, you can get an exact value for population variance. When you collect data from a sample, the sample variance is used to make estimates or inferences about the population variance. Nerd Fact. Geek Trivia. Sheldon. The term variance was first introduced by Ronald Fisher in his 1918 paper The Correlation Between Relatives on the Supposition of Mendelian Inheritance. 7.1.2 Variation ARound the Mean The one-dimensional variable x is visualized as points on a line. The mean of x is 18 (red bold line). The standard variation of x is 9.8994949 and surrounds the mean. For the truly dedicated. In statistics, the empirical rule states that 99.7% of data occurs within three standard deviations of the mean within a normal distribution. To this end, 68% of the observed data will occur within the first standard deviation, 95% will take place in the second deviation, and 97.5% within the third standard deviation. 7.1.3 Scatterplot The scatterplot is a two-dimensional instrument. It shows the original information from x and y and their respective means as bold red lines. 7.1.4 Covariance Covariance is a measure of the joint variability of two variables. The main idea of covariance is to classify three types of relationships: positive, negative or no relationship. For each data point, we multiply the differences with the respective mean. When both values are smaller or greater than the mean, the result will be positive. # Built-in command cov(x,y) #&gt; [1] 117.5 The covariance of x can be calculated from its components in R as a combination of sum(), mean() and length(). # Covariance by hand (sum((x-mean(x))*(y-mean(y)))) / (length(x)-1) #&gt; [1] 117.5 7.1.5 Covariance Visualization Now we turn to the visualization of the covariance. For each data point, we multiply the differences with the respective mean. This results in several rectangular areas starting at the intersection of means as a new origin. The covariance sums up all these areas. From the graph, can you validate the covariance result from cov(x,y) by mental calculation? 7.1.6 Correlation Covariance quantifies a relationship and is similar to correlation but when the covariance is calculated, the data are not standardized. Therefore, the covariance is expressed in units that vary with the data and is not converted to a standardized scale of 1 to +1. Because the data are not standardized, you cannot use the covariance statistic to assess the strength of a linear relationship (a covariance of 117 can be very low for one relationship and 0.23 very high for another relationship). To assess the strength of a relationship between two variables use a correlation coefficient. The correlation coefficient is a statistical measure of the strength and direction of the relationship between two variables. cor() is a basic function to calculate the correlation coefficient. # Basic function cor(x,y) #&gt; [1] 0.9564548 cor.test() is a more sophisticated version including a hypothesis test. # More advanced function cor.test(x,y) #&gt; #&gt; Pearson&#39;s product-moment correlation #&gt; #&gt; data: x and y #&gt; t = 5.6757, df = 3, p-value = 0.01084 #&gt; alternative hypothesis: true correlation is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 0.4751038 0.9972195 #&gt; sample estimates: #&gt; cor #&gt; 0.9564548 The correlation test is based on a t-value (t = 5.6757104) and returns a p-value (0.0108364) for statistical significance. Please look up the exact formula to produce this t- and p-value and code it in R (each 1 pt). Hint: For the t-value you can use a combination of cor() and sqrt(). For the p-value you can use the pt(). ## Calculate t-value for correlation t &lt;- cor(x,y) * sqrt(3) / sqrt(1-cor(x,y)^2) t #&gt; [1] 5.67571 ## Calculate p-value for correlation ## https://stackoverflow.com/questions/46186115/calculating-p-values-for-given-t-value-in-r ## needs: t, df and pt (Student t cumulative Distribution) p &lt;- (1 - pt(q = abs(t), df = 3))*2 p #&gt; [1] 0.01083644 7.2 Application Now, the time has come to apply your knowledge to real questionnaire data – your data. Answers are anonymous, names and matriculation number have been removed. The data is provided on github. library(readr) GF &lt;- read_csv(&quot;https://raw.githubusercontent.com/MarcoKuehne/seminars_in_applied_economics/main/Data/GF_2022_57.csv&quot;) glimpse(GF) #&gt; Rows: 57 #&gt; Columns: 8 #&gt; $ Academic.level &lt;chr&gt; &quot;Bachelor&quot;, &quot;Bachelor&quot;, &quot;Master&quot;, &quot;Mast… #&gt; $ Gender &lt;chr&gt; &quot;Female&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Ma… #&gt; $ Age &lt;dbl&gt; 23, 22, 23, 24, 27, 23, 20, 22, 27, 22,… #&gt; $ Total.Semesters &lt;dbl&gt; 8, 10, 9, 2, 10, 7, 5, 8, 13, 10, 8, 8,… #&gt; $ Background.in.Statistics &lt;dbl&gt; 2, 4, 4, 3, 2, 3, 2, 2, 4, 4, 2, 2, 2, … #&gt; $ Background.in.R &lt;dbl&gt; 2, 3, 2, 1, 1, 1, 3, 1, 4, 4, 1, 2, 2, … #&gt; $ Background.in.Academic.Writing &lt;dbl&gt; 2, 2, 4, 3, 4, 2, 3, 2, 4, 3, 1, 2, 3, … #&gt; $ Expectations &lt;chr&gt; &quot;I want to be efficient in my knowledge… 7.2.1 One Variable Graphics Please create the histogram (in base R or ggplot). hist(GF$Total.Semesters, main=&quot;Histogram of Semester&quot;, xlab=&quot;Semester&quot;, ylab=&quot;Frequency&quot;, breaks=12) 7.2.2 Two Variable Graphics Replicate the following graph. It is a scatterplot of age versus semester (either base R or ggplot). Add a regression line to the plot to illustrate the general tendency of the relationship. Hint: Use lm() to build a linear model. Inside goes a formula of y ~ x and a dataset with the data option. Use abline() in base R. linear_model &lt;- lm(Total.Semesters~Age, data=GF) plot(GF$Age, GF$Total.Semesters, main=&quot;Relationship between Age and Semester&quot;, xlab=&quot;Age&quot;, ylab=&quot;Semester&quot;, cex=1.5, col=&quot;red&quot;, pch=7) linear_model &lt;- lm(Total.Semesters~Age, data=GF) abline(linear_model) 7.2.3 Correlation and Regression What’s the difference between correlation and simple regression? linear_model &lt;- lm(Total.Semesters~Age, data=GF) linear_model$coefficients #&gt; (Intercept) Age #&gt; 1.8010913 0.2323192 The regression coefficient of age is 0.2323192. What is the Pearson correlation coefficient (between -1 and 1)? GF_cor &lt;- cor(GF$Age, GF$Total.Semesters, method=&quot;pearson&quot;) GF_cor #&gt; [1] 0.1992823 The correlation coefficient and regression coefficient are related and only coincide when the two variables are on the same scale. The most common way of achieving this is through standardization. \\[\\beta = cor(Y,X) \\cdot \\frac{SD(Y)}{SD(X)} \\] Please code the above formula for the given GF data and show the equivalence of the beta coefficient and the adjusted correlation coefficient. Access the regression coefficient of age from the linear model and store it as reg_coef_age. Store the adjusted correlation coefficient as adj_cor_coef. Print out the logical comparison of reg_coef_age and adj_cor_coef. If it returns FALSE, compare versions of reg_coef_age and adj_cor_coef that are rounded to 6 digits. Use round(). ## Print the regression coefficient (beta) from model1 ## Save as beta beta_a &lt;- linear_model$coefficients[2] ## nice alternative beta_a &lt;- summary(linear_model)$coefficients[2,1] ## Compare with the formula: cor(Y,X) * SD(Y)/SD(X) beta_b &lt;- cor(GF$Age, GF$Total.Semesters) * sd(GF$Total.Semesters) / sd(GF$Age) ## Are those betas perfectly equal? ## Please compare those two betas insofar that the console returns a logical value beta_a == beta_b #&gt; [1] FALSE ## Round the betas to 4 digits and check again. round(beta_a, 6) == round(beta_b,6) #&gt; [1] TRUE "],["regression.html", "Chapter 8 Regression 8.1 From Artists and Economists 8.2 Data is everywhere 8.3 For the truly dedicated 8.4 Survival of the Fittest Line 8.5 On the Shoulders of Giants", " Chapter 8 Regression This chapter introduces the workhorse of empirical research in the social science: Regression. “As an undergraduate I studied economics, which meant I studied a lot of regressions. It was basically 90% of the curriculum (when we’re not discussing supply and demand curves, of course). The effect of corruption on sumo wrestling? Regression. Effect of minimum wage changes on a Wendy’s in NJ? Regression. Or maybe The Zombie Lawyer Apocalypse is more your speed (O.K., not a regression, but the title was cool).” – Amanda West (2020) – A Beginner’s Guide to Instrumental Variables “We are gonna talk about what has been, what is and what always will be the most important statistical technique ever: Regression. Almost every analysis you will read or see uses regression in some way of another.” – Prof. Matt Masten (2015) – Introduction to Regression Analysis: Causal Inference Bootcamp 8.1 From Artists and Economists “Paul Cezanne died in October 1906 at the age of 67. In time he would be generally regarded as the most influential painter who had worked in the nineteenth century (e.g., Clive Bell, 1982; Clement Greenberg, 1993). Art historians and critics would also agree that his greatest achievement was the work he did late in his life.” – Galenson, D. W., &amp; Weinberg, B. A. (2001). Creating modern art: The changing careers of painters in France from impressionism to cubism. American Economic Review, 91(4), 1063-1071.8 This analysis investigates famous painter. We wonder if there is a relationship between the age of an artist and his productivity? Do artists improve their skills and performance over an entire lifetime step-by-step such that older artists are better than younger artists since they had more “time to practice”? Or is there an optimum age for performance as compared to athletic performances which reaches a peak in youth? Perhaps no one can tell if and when you are kissed by a muse, so exceptional art happens randomly? Perhaps it takes time to become more well-known. You need time to travel and show or sell your art in different places. Thus when you produce “more art” you increase the chance to be discovered by the public or a patron? Have you ever heard of an artist who exactly created one piece of art? We raise the question:   What is the relationship between the age of an artist and his productivity?   A research question is … focused on a single issue, specific enough to answer thoroughly and feasible to answer within the given time frame or practical constraints not to mention relevant to your field of study. But what exactly is productivity and how can we measure it? To keep things simple we follow the literature and measure productivity via auction prices for paintings. That’s a very economic perspective on art. Operationalization is … the process of defining the measurement of a phenomenon that is not directly measurable What is intelligence and how can we measure it? Perhaps with the intelligence quotient (IQ). Perhaps something else. 8.2 Data is everywhere Researchers use auction price data for which they have to pay. We use free information from a Wikipedia List of most expensive paintings of all time. The auction prices are inflation-adjusted by consumer price index in millions of United States dollars in 2019. That’s another interesting economic procedure, that we take for given at this analysis. 8.2.1 Data in a table This is the data in datatable format (i.e. you can search and sort the data in the html document): Tabular data is… common in data analysis. You can create a table in Word or Excel. 8.2.2 Data in a graph Two variables from our data table can be depicted in what is called a scatterplot. The axes are called … ordinate or y-axis (here: price) and abscissa or x-axis (here: age). 8.2.3 The trend Can you spot a trend in the data? The line plot suggests that the relationship between price and age exhibits a positive trend. There is an increase in price for older artists. The older the artist, the higher the auction prices. 8.2.4 The blackbox The mission is to find a mathematical function that describes the trend. In other words, we are looking for the black box that transforms the input into the output: alt text here A mathematical function is … an expression, rule, or law that defines a relationship between one variable (the independent variable, on the x-axis) and another variable (the dependent variable, on the y-axis). From looking at the graph, here are two suggestions: \\[\\begin{align} \\text{price} = 80 + 0.5 \\cdot \\text{age} \\tag{Suggestion 1} \\\\ \\text{price} = 90 + 0.2 \\cdot \\text{age} \\tag{Suggestion 2} \\\\ \\end{align}\\] A linear function is … defined by two components, intercept (with the y-axis) and it’s slope. How can we compare the two suggested lines? Which linear function represents the relationship best? 8.2.5 Nobody’s perfect We all make mistakes. So do the linear functions: \\[ \\begin{align} \\text{price} = 80 + 0.5 \\cdot \\text{age} \\tag{Suggestion 1} \\\\ 101 = 80 + 0.5 \\cdot 42 \\tag{Calculation for Hohlbein} \\\\ \\end{align}\\] The equation tells (or predicts) that for any artist at the age of 42 it expects a auction price for a painting of 101 million US Dollar. Darmstadt Madonna was sold for 85 million US dollar. The linear function overestimated the true value. When you look at the graph, you see some predictions are more accurate (close to the true values) than others. All are either above or below the line. A residual (or error) is … the vertical distance between the actual and the predicted value. 8.2.6 Vocab Wrap-Up Let’s wrap up our regression vocab! We want to find an equation that describes the phenomenon of interest: \\[ \\begin{align} \\text{outcome} &amp;= f(\\text{explanatory}) + \\text{noise} \\tag{Generic statistical model} \\\\ \\text{outcome} &amp;= \\text{intercept} + \\text{slope} \\cdot \\text{explanatory} + \\text{noise} \\tag{Generic linear model} \\\\ \\end{align}\\] A regression model is suggested by the researcher. A more concrete regression model looks like this: \\[Y = \\beta_1 + \\beta_2 X + \\epsilon\\] A model can be easy or complicated. It definitely contains variables and parameters. Variables: Things that we measure (or have data). Parameters: Constant values we believe to represent some fundamental truth about the relationship between the variables. What we (i.e. the statistical software) actual do is an estimation. In textbooks the same equation can be found with hats: \\[ \\widehat{Y} = \\widehat{\\beta}_1 + \\widehat{\\beta}_2 \\cdot X \\] \\(\\widehat{Y}\\) are called the fitted or predicted values. \\(\\widehat{\\beta}\\) are regression coefficients (this is the estimate of the unknown population parameter). As we have seen in the graph before, the differences between the actual and the predicted values are the residuals \\(e = Y - \\widehat{Y}\\). 8.3 For the truly dedicated Now we have all the ingredients we need. Let’s get this party started! Carlton Dance The overall goal is to make as little as possible mistakes! What kind of mistake? The deviation from the observed values! What could come to your mind is to minimize the sum of all errors: \\[\\sum e \\rightarrow \\min\\] But wait, there is more. Is it fair to say that the sum should be small? Compare The Scream and Meules, their deviations are \\(+17.5\\) and \\(-13.6\\) (very similar). So taken these two together, there’s almost not mistake! That is to say, positive and negative deviations cancel each other out. Thus we need one more twist in the story: \\[\\sum e^2 \\rightarrow \\min\\] The fitting procedure is … is called ordinary least squares (short OLS). The goal of OLS is to minimize the residual sum of squares. 8.3.1 Algebra Algebra comes from Arabic, meaning “reunion of broken parts”. We often work with matrices and vectors. Now let’s put all the things together. By convention, the normal version of a vector is a vertical list of numbers in big parentheses (column vector). Transpose is when we change the rows and columns. In order to square a vector we need the following: \\[\\sum e^2 = e^T \\cdot e \\rightarrow \\min\\] Let’s introduce matrix notation (there are 6 observations and two parameters): \\[ \\begin{align} Y &amp;= \\beta_0 + \\beta_1 X + \\epsilon \\tag{X is a variable, Y is a variable} \\\\ \\begin{pmatrix} Y_1 \\\\ Y_2 \\\\ Y_3 \\\\ Y_5 \\\\ Y_6 \\end{pmatrix} &amp;= \\begin{pmatrix} 1 &amp; X_{11} \\\\ 1 &amp; X_{12} \\\\ 1 &amp; X_{13} \\\\ 1 &amp; X_{14} \\\\ 1 &amp; X_{15} \\\\ 1 &amp; X_{16} \\end{pmatrix} \\begin{pmatrix} \\beta_1 \\\\ \\beta_2 \\end{pmatrix} + \\begin{pmatrix} \\epsilon_1 \\\\ \\epsilon_2 \\\\ \\epsilon_3 \\\\ \\epsilon_4 \\\\ \\epsilon_5 \\\\ \\epsilon_6 \\\\ \\end{pmatrix} \\\\ y &amp;= X \\beta + \\epsilon \\tag{X is a matrix, y is a vector} \\end{align}\\] The residual is \\(e = y - X \\beta\\) which we can plug in our minimal sum of squares: \\[\\begin{align} \\sum e^2 &amp;= e^T \\cdot e \\tag{short RSS}\\\\ &amp;= (y - X \\beta )^T (y - X \\beta) \\tag{$(A+B)^T = A^T + B^T$}\\\\ &amp;= (y^T - X^T \\beta^T) (y - X \\beta) \\\\ &amp;= y^T y - y^T X \\beta - X^T \\beta^T y + X^T \\beta^T X \\beta \\\\ &amp;= y^2 \\underbrace{- 2 \\beta^T X^T y}_{??} + \\beta^2 X^2 \\\\ \\end{align}\\] Did you notice what happened in the middle? The transpose of the first term is equal to the second: \\[\\begin{align} (y^T X \\beta)^T = y X^T \\beta^T \\end{align}\\] 8.3.2 Analysis In Analysis we often work with functions. Next, we are ready to optimize. Optimization (in math and economics) is done by differentiation: \\[\\begin{align} \\frac{\\partial RSS}{\\partial \\beta} &amp;= -2 X^T y + 2 \\beta X^T X = 0 \\tag{first derivative equal to zero} \\\\ 2 \\beta X^T X &amp;= 2 X^T y \\tag{rearrange terms}\\\\ \\beta X^T X &amp;= X^T y \\tag{the &quot;normal equation&quot;} \\\\ \\beta &amp;= (X^T X)^{-1} X^T y \\tag{Bam}\\\\ \\end{align}\\] 8.3.3 Take the Long Way Home The computer does the magic for us. Magic Alice Those \\(\\beta\\) coefficients are one of the most important regression results. Retrieve them step by step to enhance your understanding of the math and coding as the same time: First, we retrieve matrix X from the data set: X #&gt; [,1] [,2] #&gt; [1,] 1 91 #&gt; [2,] 1 86 #&gt; [3,] 1 67 #&gt; [4,] 1 45 #&gt; [5,] 1 80 #&gt; [6,] 1 71 Second, the transpose of X has two rows and six columns: t(X) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] #&gt; [1,] 1 1 1 1 1 1 #&gt; [2,] 91 86 67 45 80 71 Next, calculate the square of the matrix (transpose times original): t(X)%*%X #&gt; [,1] [,2] #&gt; [1,] 6 440 #&gt; [2,] 440 33632 Then, the inverse of everything in parentheses (the above matrix product): solve(t(X)%*%X) #&gt; [,1] [,2] #&gt; [1,] 4.10546875 -0.0537109375 #&gt; [2,] -0.05371094 0.0007324219 Next, the product of this inverse and the transpose: solve(t(X)%*%X) %*% t(X) #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] -0.78222656 -0.513671875 0.506835938 1.68847656 -0.191406250 #&gt; [2,] 0.01293945 0.009277344 -0.004638672 -0.02075195 0.004882813 #&gt; [,6] #&gt; [1,] 0.291992188 #&gt; [2,] -0.001708984 Finally, we multiply the vector \\(y\\): solve(t(X)%*%X) %*% t(X) %*% y #&gt; [,1] #&gt; [1,] 22.345215 #&gt; [2,] 1.165747 There are two numbers. It’s the \\(\\beta\\) vector! The first entry is the intercept and the second is the slope of the linear function: \\[Price = 22.3452 + 1.1657 \\cdot Age\\] 8.4 Survival of the Fittest Line The above equation is the linear function that best describes the given data. 8.5 On the Shoulders of Giants Fortunately, we are standing on the shoulders of giants. Clever people implemented the linear regression and all kinds of regressions and statistical tests in R. lm(Price ~ Age.at.Death, data = artists) #&gt; #&gt; Call: #&gt; lm(formula = Price ~ Age.at.Death, data = artists) #&gt; #&gt; Coefficients: #&gt; (Intercept) Age.at.Death #&gt; 22.345 1.166 AER is a famous and reliable economic journal.↩︎ "],["logistic-regression.html", "Chapter 9 Logistic Regression 9.1 Minimal Example 9.2 Application: Titanic Survival 9.3 Addons 9.4 Motivation 9.5 Load and Merge 9.6 Data Manipulation 9.7 Simple linear model 9.8 Multiple regression with control 9.9 Multiple regression with moderator 9.10 Marginal Effects", " Chapter 9 Logistic Regression Logistic regression is the appropriate regression analysis to conduct when the dependent variable is dichotomous (binary). 9.1 Minimal Example 9.1.1 Think inside of a box The following table contains data on the relationship between hours of study and the outcome of an exam (pass/fail) sorted ascending for study hours: pass 0 0 0 0 1 0 0 1 0 1 1 1 hours 0.75 1.00 1.50 1.75 1.75 2.00 2.50 2.75 3.00 3.25 4.25 5.00 Please do a side-by-side plot via ggplot and gridExtra package with pass on the y-axis and hours of study on the x-axis. Please fit a line though the left panel and a squiggle through the right panel. Use the layer geom_smooth with method option either lm (linear model) or glm (general linear model). 9.1.2 From probability to odds Please do the following: Create a data.frame called data. Within data, create a sequence of values ranging from 0 to 1 in 0.01 steps and store it as p (probability). Within data, calculate the corresponding odds, store as odds. Create a simple plot showing the relation between odds and probability using the plotly package. p &lt;- seq(from=0, to=1, by=0.01) odds &lt;- p/(1-p) data &lt;- data.frame(p, odds) ## par(mfrow=c(1,2)) ## plot(p, odds) ## plot(p, odds, xlim=c(0,0.25), ylim = c(0,0.25)) ## mtext(&quot;My &#39;Title&#39; in a strange place&quot;, side = 3, line = -21, outer = TRUE) head(data) #&gt; p odds #&gt; 1 0.00 0.00000000 #&gt; 2 0.01 0.01010101 #&gt; 3 0.02 0.02040816 #&gt; 4 0.03 0.03092784 #&gt; 5 0.04 0.04166667 #&gt; 6 0.05 0.05263158 library(plotly) plot_ly(data = data, x = ~p, y = ~odds) 9.1.3 From odds to log of odds Please calculate the log of odds, store it as logodds (can be another object). Create a side-by-side graph showing the relation between probability and odds and probability and logodds with the plotly package. logodds &lt;- log(odds) ## par(mfrow=c(1,2)) ## plot(p, odds) ## plot(p, logodds) library(plotly) fig1 &lt;- plot_ly(data = data, x = ~p, y = ~odds) fig1 &lt;- fig1 %&gt;% add_lines(name = ~&quot;odds&quot;) fig2 &lt;- plot_ly(data = data, x = ~p, y = ~logodds) fig2 &lt;- fig2 %&gt;% add_lines(name = ~&quot;logodds&quot;) fig &lt;- subplot(fig1, fig2) fig Imagine you flip the axes, doesn’t this look like the initial S curve we were looking for? 9.2 Application: Titanic Survival 9.2.0.1 Data Management (2 pt) Please register at Kaggle. Go to https://www.kaggle.com/c/titanic/data and download the datasets (train.csv, test.csv, gender_submission.csv). Put them in your working directory. The following merge commands should work. library(tidyverse) ## load individual datasets titanic.train = read.csv(&#39;data/train.csv&#39;, header = T, na.strings = c(&#39;&#39;)) titanic.test = read.csv(&#39;data/test.csv&#39;, header = T, na.strings = c(&quot;&quot;)) test.label = read.csv(&#39;data/gender_submission.csv&#39;, header = T, na.string=c(&quot;&quot;)) ## merge labels with test titanic.test = merge(titanic.test, test.label, by = &quot;PassengerId&quot;) ## bind test and train (here we don&#39;t make the distinction) titanic = rbind(titanic.test, titanic.train) ## convert Pclass to factor (from numeric) titanic$Pclass = as.factor(titanic$Pclass) ## convert all character variables to factor titanic &lt;- as.data.frame(titanic, stringsAsFactors=TRUE) titanic &lt;- titanic %&gt;% mutate_if(is.character,as.factor) Let’s check the number of missing values per variable: ## missings per variable n = 1309 sapply(X = titanic, FUN = function(x) sum(is.na(x))) #&gt; PassengerId Pclass Name Sex Age SibSp #&gt; 0 0 0 0 263 0 #&gt; Parch Ticket Fare Cabin Embarked Survived #&gt; 0 0 1 1014 2 0 There are 2 missing values in Embarked and 263 in Age. The most missings fall upon Cabin though. Cabin information is not a very useful predictor for survival, thus we can remove this information for our analysis. Conduct a complete case analysis. The dataset should look like this (n = 1043): titanic &lt;- titanic %&gt;% select(!Cabin) ## ## n = 1043 ## titanic &lt;- titanic %&gt;% ## filter(Age &gt; 0) ## complete cases n = 1043 titanic &lt;- titanic[complete.cases(titanic), ] glimpse(titanic) #&gt; Rows: 1,043 #&gt; Columns: 11 #&gt; $ PassengerId &lt;int&gt; 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904… #&gt; $ Pclass &lt;fct&gt; 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 1, 1, 2, 1, 2, 2, 3, 3, 3, 1… #&gt; $ Name &lt;fct&gt; &quot;Kelly, Mr. James&quot;, &quot;Wilkes, Mrs. James (Ellen Needs)&quot;, &quot;M… #&gt; $ Sex &lt;fct&gt; male, female, male, male, female, male, female, male, fema… #&gt; $ Age &lt;dbl&gt; 34.5, 47.0, 62.0, 27.0, 22.0, 14.0, 30.0, 26.0, 18.0, 21.0… #&gt; $ SibSp &lt;int&gt; 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1… #&gt; $ Parch &lt;int&gt; 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… #&gt; $ Ticket &lt;fct&gt; 330911, 363272, 240276, 315154, 3101298, 7538, 330972, 248… #&gt; $ Fare &lt;dbl&gt; 7.8292, 7.0000, 9.6875, 8.6625, 12.2875, 9.2250, 7.6292, 2… #&gt; $ Embarked &lt;fct&gt; Q, S, Q, S, S, S, Q, S, C, S, S, S, S, S, C, Q, C, S, C, C… #&gt; $ Survived &lt;int&gt; 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0… ## estimation titanic_estimation &lt;- titanic %&gt;% select(!c(PassengerId, Name, Ticket)) 9.2.0.2 No Predictor Variables (1 pt) There is no predictor, only the intercept (empty model): \\[logit (p) = \\beta_0\\] library(tidyverse) logistic0 = glm(Survived ~ 1, family = binomial(link = &#39;logit&#39;), data = titanic) logistic0 #&gt; #&gt; Call: glm(formula = Survived ~ 1, family = binomial(link = &quot;logit&quot;), #&gt; data = titanic) #&gt; #&gt; Coefficients: #&gt; (Intercept) #&gt; -0.4143 #&gt; #&gt; Degrees of Freedom: 1042 Total (i.e. Null); 1042 Residual #&gt; Null Deviance: 1402 #&gt; Residual Deviance: 1402 AIC: 1404 Please recalculate the intercept from model logistic0, i.e. the value -0.4142616. Use the probability of survival from titanic data (check the count of titanic$Survived). Store and show the probability of survival in a vector named survive_p. Store and show the odds of survival as survive_odds. Calculate and store the logodds of survival as survive_logodds (this should be equivalent to the empty model intercept). ##table(titanic$Survived) ##table(titanic$Survived)[1] ##table(titanic$Survived)[2] survive_p &lt;- table(titanic$Survived)[2]/(table(titanic$Survived)[2]+table(titanic$Survived)[1]) survive_odds &lt;- survive_p/(1-survive_p) survive_logodds &lt;- log(survive_odds) ## ## 38.9% survived ## 398/(398+623) ## ## The odds are ## 0.3898139/ (1-0.3898139) ## ## 0.6229509 and the log of the odds (logit) is ## log(0.6388443) ## ## -0.4480945, exactly what the regression intercept is 9.2.0.3 Single Dichotomous Predictor (1 pt) Now include gender as an explanatory variable. We expect being male reduces the probability of surviving. \\[logit (p) = \\beta_0 + \\beta_1 \\cdot sex\\] logistic1 = glm(Survived ~ Sex, family = binomial(link = &#39;logit&#39;), data = titanic) logistic1 #&gt; #&gt; Call: glm(formula = Survived ~ Sex, family = binomial(link = &quot;logit&quot;), #&gt; data = titanic) #&gt; #&gt; Coefficients: #&gt; (Intercept) Sexmale #&gt; 1.616 -3.418 #&gt; #&gt; Degrees of Freedom: 1042 Total (i.e. Null); 1041 Residual #&gt; Null Deviance: 1402 #&gt; Residual Deviance: 882.6 AIC: 886.6 The dummy variable behaves as in the linear model: The logodds of survival for men are: -1.8024548 The logodds of survival for women are: 1.6156685 Please calculate the logodds for men based on the frequencies of male and female survival: table(titanic$Survived, titanic$Sex) #&gt; #&gt; female male #&gt; 0 64 564 #&gt; 1 322 93 Please use a programmatic approach in R to access those values. All calculations and results need to be shown. ## odds ratio: odds for female to the odds for male: 2.876543/0.2329059 = 12.35067 == (233*468)/(81*109) ## the odds for females are about 1235% higher than the odds for males ## odds ratio: odds for male to the odds for female: 0.2329059/2.876543 = 0.08096729 ## the odds for male are about 8% of the odds for females ## The coefficient for female is the log of odds ratio between the female group and male group: log(12.35067) = 2.51371 ## The coefficient for male is the log of odds ratio between the male group and female group: log(0.08096729) = -2.51371 ###### titanic full data table(titanic$Survived, titanic$Sex) ## male survival: (~ 14%) table(titanic$Survived, titanic$Sex)[2,2]/(table(titanic$Survived, titanic$Sex)[2,2] + table(titanic$Survived, titanic$Sex)[1,2]) ## ## female survival: (~ 83%) table(titanic$Survived, titanic$Sex)[2,1]/(table(titanic$Survived, titanic$Sex)[2,1] + table(titanic$Survived, titanic$Sex)[1,1]) ## male odds: table(titanic$Survived, titanic$Sex)[2,2] / table(titanic$Survived, titanic$Sex)[1,2] ## female odds: table(titanic$Survived, titanic$Sex)[2,1] / table(titanic$Survived, titanic$Sex)[1,1] ## logodds male log(table(titanic$Survived, titanic$Sex)[2,2] / table(titanic$Survived, titanic$Sex)[1,2]) ## logodds female log(table(titanic$Survived, titanic$Sex)[2,1] / table(titanic$Survived, titanic$Sex)[1,1]) ## odds ratio: odds for male to the odds for female: 0.03277389 (table(titanic$Survived, titanic$Sex)[2,2] / table(titanic$Survived, titanic$Sex)[1,2])/(table(titanic$Survived, titanic$Sex)[2,1] / table(titanic$Survived, titanic$Sex)[1,1]) ## odds ratio: odds for female to the odds for male: 30.5121 (table(titanic$Survived, titanic$Sex)[2,1] / table(titanic$Survived, titanic$Sex)[1,1])/(table(titanic$Survived, titanic$Sex)[2,2] / table(titanic$Survived, titanic$Sex)[1,2]) 9.2.0.4 Effect plot (1 pt) Use a nested version of plot() on allEffects() on the logistic1 model (effects package). library(effects) plot(allEffects(logistic1)) What kind of effect does this plot show? And how did the effects package make those estimates? Inverse the logit function on the logodds estimates. Define the function invLogit(): invLogit &lt;- function(x) exp(x)/(1 + exp(x)) Apply invLogit() on the logodds for males. Show that the results are equivalent to the numbers from the effect plot. invLogit &lt;- function(x) exp(x)/(1 + exp(x)) ## logodds male invLogit(log(table(titanic$Survived, titanic$Sex)[2,2] / table(titanic$Survived, titanic$Sex)[1,2])) ## logodds female invLogit(log(table(titanic$Survived, titanic$Sex)[2,1] / table(titanic$Survived, titanic$Sex)[1,1])) 9.2.0.5 Chi Square Test For Independence (1 pt) The epitab package can improve the contingency tables of survival by gender. From looking at this table, a lot men died (n = 564) and a lot women survived (n = 322). Those who survied have been about 77% female, those who deceased are about 90% male. library(epitab) titanic_fct &lt;- titanic %&gt;% mutate(Survived_fct = factor(Survived)) ## levels = c(&quot;Deceased&quot;, &quot;Survived&quot;) ## levels(titanic_fct$Survived_fct) tab &lt;- contingency_table(list(&quot;Sex&quot;=&#39;Sex&#39;), outcomes=list(&#39;Survival&#39;=&#39;Survived_fct&#39;), ## need to be factors crosstab_funcs=list(freq()), data=titanic_fct) neat_table(tab, format = c(&quot;html&quot;)) Survival All 0 1 Total 1043 628 (100) 415 (100) Sex female 386 (37) 64 (10.2) 322 (77.6) male 657 (63) 564 (89.8) 93 (22.4) The \\(\\chi^2\\) test is an alternative to test the relationship between two categorical variables. chisq.test(titanic$Survived, titanic$Sex) #&gt; #&gt; Pearson&#39;s Chi-squared test with Yates&#39; continuity correction #&gt; #&gt; data: titanic$Survived and titanic$Sex #&gt; X-squared = 484.02, df = 1, p-value &lt; 2.2e-16 Please recalculate the test statistic, i.e. the value: chisq.test(titanic$Survived, titanic$Sex)$statistic #&gt; X-squared #&gt; 484.0245 from the observed values. The formula for \\(X^2\\) is: addmargins(table(titanic$Survived, titanic$Sex)) \\(X^2 = \\sum_i \\frac{(O_i-E_i)^2}{E_i}\\), where \\(O_i\\) is the observed frequency and \\(E_i\\) is the expected frequency. The following steps are suggested. ## Step 1: Store the observed values in a table tab_obs &lt;- table(titanic$Survived, titanic$Sex) ## Step 2: Calculate expected absolute frequency library(&quot;DescTools&quot;) tab_exp &lt;- ExpFreq(XYZ, freq =&quot;abs&quot;) ## Step 3: Subtract the expected value from the observed value (and square differences) ## ... ## Step 4: Divide by expected values ## ... ## Step 5: Sum up all ## ... tab_margins &lt;- addmargins(table(titanic$Survived, titanic$Sex)) tab_obs &lt;- table(titanic$Survived, titanic$Sex) ## Step 1: Expected absolute frequency library(&quot;DescTools&quot;) tab_exp &lt;- ExpFreq(table(titanic$Survived, titanic$Sex), freq =&quot;abs&quot;) ## Step 2: Subtract the expected value from the observed value (and square differences) (tab_obs-tab_exp)^2 ## Step 3: Divide by expected values (tab_obs-tab_exp)^2/tab_exp ## Step 4: Sum up all tab_temp &lt;- (tab_obs-tab_exp)^2/tab_exp tab_temp[1,1] + tab_temp[1,2] + tab_temp[2,1] + tab_temp[2,2] 9.3 Addons 9.3.0.1 Some Are More Equal Than Others Let’s extend the group analysis to multiple categories using the Pclass variable. The passenger class represents the socio-economic status of people. We hypothesize that people with more money used their influence to get into one of the lifeboats. First, the contingency table of the situation: tab &lt;- contingency_table(list(&quot;Passenger Class&quot;=&#39;Pclass&#39;), outcomes=list(&#39;Survival&#39;=&#39;Survived_fct&#39;), ## need to be factors crosstab_funcs=list(freq()), data=titanic_fct) neat_table(tab, format = c(&quot;html&quot;)) Survival All 0 1 Total 1043 628 (100) 415 (100) Passenger Class 1 282 (27) 114 (18.2) 168 (40.5) 2 261 (25) 149 (23.7) 112 (27) 3 500 (47.9) 365 (58.1) 135 (32.5) In first class, more people survived (n=168) than died (n=114) whereas this not true for the third class (365 died and 135 survived). All men may be created equal, but some are more equal than others. The logistic regression with one categorical variable is straightforward: logistic2 = glm(Survived ~ Pclass, family = binomial(link = &#39;logit&#39;), data = titanic) logistic2 #&gt; #&gt; Call: glm(formula = Survived ~ Pclass, family = binomial(link = &quot;logit&quot;), #&gt; data = titanic) #&gt; #&gt; Coefficients: #&gt; (Intercept) Pclass2 Pclass3 #&gt; 0.3878 -0.6732 -1.3824 #&gt; #&gt; Degrees of Freedom: 1042 Total (i.e. Null); 1040 Residual #&gt; Null Deviance: 1402 #&gt; Residual Deviance: 1320 AIC: 1326 The lower your socio-economic status, the less survival can you expect. 9.3.0.2 The Cheaper The Deader? We have another option to investigate the effect of socio-economic class, the Fare variable (ticket price). The prices of tickets on the Titanic in 1912 ranged from £870 or $4,350 for a first-class parlor suite to a maximum of £8 or $40 for a third-class passage, according to The Washington Times. A century later, in 2012, those ticket prices equaled a range of $50,000 to $460. logistic3 = glm(Survived ~ Fare, family = binomial(link = &#39;logit&#39;), data = titanic) logistic3 #&gt; #&gt; Call: glm(formula = Survived ~ Fare, family = binomial(link = &quot;logit&quot;), #&gt; data = titanic) #&gt; #&gt; Coefficients: #&gt; (Intercept) Fare #&gt; -0.80666 0.01109 #&gt; #&gt; Degrees of Freedom: 1042 Total (i.e. Null); 1041 Residual #&gt; Null Deviance: 1402 #&gt; Residual Deviance: 1337 AIC: 1341 The coefficient and intercept estimates give us the following equation: \\[ \\text{logit}(p) = -0.80666 + 0.01109 \\cdot \\text{fare} \\] In this case, the estimated coefficient for the intercept is the log odds of a passenger with a fare of zero surviving the accident. Of course, there is nothing like a free lunch. So the intercept in this model corresponds to the log odds of survival when fare is at the hypothetical value of zero. How do we interpret the slope coefficient for Fare? Let’s fix Fare at some value, e.g. the mean which roughly equals 37 (rounded to 0 decimals). Then the conditional logit of surviving when the fare is equal to the mean is: \\[\\begin{aligned} \\text{logit}(p | \\text{fare}=36) &amp;= -0.3964565 \\\\ \\text{logit}(p | \\text{fare}=37) &amp;= -0.38537 \\\\ \\end{aligned}\\] We can examine the effect of a one-unit increase in fare by taking the difference of the two equations: \\[\\text{logit}(p | \\text{fare}=37) - \\text{logit}(p | \\text{fare}=36) = 0.0110866 \\] In other words, for a one-unit increase in the fare price, the expected change in log odds is 0.0110866. Can we translate this change in log odds to the change in odds? Indeed, we can. Recall that logarithm converts multiplication and division to addition and subtraction. Its inverse, the exponentiation converts addition and subtraction back to multiplication and division. If we exponentiate both sides of our last equation, we have the following: \\[ e^{\\text{logit}(p | \\text{fare}=37) - \\text{logit}(p | \\text{fare}=36)} = e^{0.0110866} = 1.011148 \\] So we can say for a one-unit increase in fare price, we expect to see about 1.1% increase in the odds of surviving. This 1.1% of increase does not depend on the value that fare is held at. Information about Britain’s currency at that time. Before Britain’s currency was in terms of pounds and pence, it was in terms of pounds, shillings and pennies e.g. £18 15s 9d. There were: 12 pennies per shilling and 20 shillings per pound. Can we get this information more directly? Yes, we can. require(MASS) exp(cbind(coef(logistic3), confint(logistic3))) #&gt; 2.5 % 97.5 % #&gt; (Intercept) 0.4463467 0.3780949 0.5250284 #&gt; Fare 1.0111482 1.0080791 1.0145089 9.3.0.3 The Bigger Picture First, we take another subset, since PassengerId, Name and Ticket are not good predictors. logistic4 = glm(Survived ~ ., family = binomial(link = &#39;logit&#39;), data = titanic[,-c(1,3,8)]) logistic4 #&gt; #&gt; Call: glm(formula = Survived ~ ., family = binomial(link = &quot;logit&quot;), #&gt; data = titanic[, -c(1, 3, 8)]) #&gt; #&gt; Coefficients: #&gt; (Intercept) Pclass2 Pclass3 Sexmale Age SibSp #&gt; 4.386959 -1.149070 -2.085981 -3.689634 -0.035951 -0.318940 #&gt; Parch Fare EmbarkedQ EmbarkedS #&gt; -0.116273 0.001661 -0.282530 -0.178047 #&gt; #&gt; Degrees of Freedom: 1042 Total (i.e. Null); 1033 Residual #&gt; Null Deviance: 1402 #&gt; Residual Deviance: 784 AIC: 804 For example, increase one unit in age will decrease the log odd of survival by 0.0257; being a male will decrease the log odd of survival by 3.78 compared to female; and being in class2 will decrease the log odd of survival by 1.17, being in class3 will decrease the log odd of survival by 1.97. Moreover, exponentiate the model coefficients can look at the result and interpret its meaning at a different angle. Below are table of the “odd ratio” value for each predictor coefficient relative to the survival and their respective 95% confident interval odd ratio value. exp(cbind(OR = coef(logistic4))) #&gt; OR #&gt; (Intercept) 80.39557659 #&gt; Pclass2 0.31693150 #&gt; Pclass3 0.12418529 #&gt; Sexmale 0.02498115 #&gt; Age 0.96468745 #&gt; SibSp 0.72691919 #&gt; Parch 0.89023213 #&gt; Fare 1.00166223 #&gt; EmbarkedQ 0.75387421 #&gt; EmbarkedS 0.83690291 Now, the result can be interpreted as: for a unit increase in age, the odds of surviving from the incident decrease by a factor of 0.96; and being a third class (class3), the odds of surviving decrease by a factor of 0.12, etc. The logit model coefficients can be presented as odds ratios. But odds-ratios are often misinterpreted as if they were relative risks/probabilities. Nonetheless presenting odds-ratios is standard practice in the medical literature. 9.3.0.4 Marginal Effects Marginal effects is a way of presenting results as differences in probabilities, which is more informative than odds-ratios and relative risk. For continuous variables this represents the instantaneous change given that the ‘unit’ may be very small. For binary variables, the change is from 0 to 1, so one ‘unit’ as it is usually thought. In order to express the more intuitive change in the predicted probability that the outcome equals 1 requires conditioning on all other included variables (i.e., selecting a set of values for all righthand-side variables) and running that set of values through the link function to convert log-odds to probabilities, thus making the marginal effect (in probability terms) of one variable a function of all other variables included in the model. Marginal effects show the change in probability when the predictor or independent variable increases by one unit. library(margins) summary(margins(logistic4)) #&gt; factor AME SE z p lower upper #&gt; Age -0.0041 0.0008 -4.9342 0.0000 -0.0057 -0.0025 #&gt; EmbarkedQ -0.0324 0.0560 -0.5783 0.5631 -0.1422 0.0774 #&gt; EmbarkedS -0.0206 0.0288 -0.7153 0.4744 -0.0769 0.0358 #&gt; Fare 0.0002 0.0002 0.7743 0.4387 -0.0003 0.0007 #&gt; Parch -0.0133 0.0130 -1.0264 0.3047 -0.0387 0.0121 #&gt; Pclass2 -0.1584 0.0423 -3.7412 0.0002 -0.2414 -0.0754 #&gt; Pclass3 -0.2656 0.0427 -6.2205 0.0000 -0.3493 -0.1819 #&gt; Sexmale -0.6608 0.0253 -26.0847 0.0000 -0.7104 -0.6111 #&gt; SibSp -0.0365 0.0134 -2.7134 0.0067 -0.0629 -0.0101 knitr::include_graphics(&quot;images/titanic.png&quot;) Figure 9.1: Figure 4: RMS Titanic. 9.4 Motivation A sports doctor routinely measures the muscle percentages of his clients. He also asks them how many hours per week they typically spend on training. Our doctor suspects that clients who train more are also more muscled. Furthermore, he thinks that the effect of training on muscularity declines with age. In multiple regression analysis, this is known as a moderation or interaction effect. The figure below illustrates it. Imagine a 34 year old student and a 49 year old professor who work out at McFit (Lenne Passage). They exercise exactly the same amount of time per week (3 day split), the same exercises (McFit usually provides multiple identical machines next to each other), the same time of the day, they take the nutritional supplements, etc. etc. everything else is constant. Do you think they will experience different results in terms of muscle gains? In mathematical terms the interaction is a multiplication: \\[ muscle = training + age + training*age \\] 9.5 Load and Merge We analyze the details of the weight-height relationship. library(haven) pequiv &lt;- read_dta(&quot;data/pequiv.dta&quot;, col_select = c(&quot;pid&quot;, &quot;syear&quot;, &quot;d11101&quot;, &quot;d11102ll&quot;, &quot;l11102&quot;, &quot;d11104&quot;)) health &lt;- read_dta(&quot;data/health.dta&quot;, col_select = c(&quot;pid&quot;, &quot;syear&quot;, &quot;height&quot;, &quot;weight&quot;)) master &lt;- merge(pequiv, health, by = c(&quot;pid&quot;, &quot;syear&quot;)) 9.6 Data Manipulation Drop Stata labels, rename the variables, and create factor variables. library(sjlabelled) soep &lt;- remove_all_labels(master) library(tidyverse) soep &lt;- soep %&gt;% rename(region = l11102, marital = d11104, age = d11101, gender = d11102ll) %&gt;% filter(height &gt; 0, weight &gt; 0, marital &gt; 0) %&gt;% mutate(marital = factor(marital, levels = c(1, 2, 3, 4, 5)), region = factor(region, levels = c(1, 2)), gender = factor(gender, levels = c(1, 2))) levels(soep$marital) = c(&quot;married&quot;, &quot;single&quot;, &quot;widowed&quot;, &quot;divorced&quot;, &quot;separated&quot;) levels(soep$region) = c(&quot;west&quot;, &quot;east&quot;) levels(soep$gender) = c(&quot;male&quot;, &quot;female&quot;) Inspect the data (check for missings and outliers): library(gtsummary) tbl_summary(soep[-c(1,2)]) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ikcpexnevb .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ikcpexnevb .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ikcpexnevb .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ikcpexnevb .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ikcpexnevb .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ikcpexnevb .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ikcpexnevb .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ikcpexnevb .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ikcpexnevb .gt_column_spanner_outer:first-child { padding-left: 0; } #ikcpexnevb .gt_column_spanner_outer:last-child { padding-right: 0; } #ikcpexnevb .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ikcpexnevb .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ikcpexnevb .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ikcpexnevb .gt_from_md > :first-child { margin-top: 0; } #ikcpexnevb .gt_from_md > :last-child { margin-bottom: 0; } #ikcpexnevb .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ikcpexnevb .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ikcpexnevb .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ikcpexnevb .gt_row_group_first td { border-top-width: 2px; } #ikcpexnevb .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ikcpexnevb .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ikcpexnevb .gt_first_summary_row.thick { border-top-width: 2px; } #ikcpexnevb .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ikcpexnevb .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ikcpexnevb .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ikcpexnevb .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ikcpexnevb .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ikcpexnevb .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ikcpexnevb .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #ikcpexnevb .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ikcpexnevb .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ikcpexnevb .gt_left { text-align: left; } #ikcpexnevb .gt_center { text-align: center; } #ikcpexnevb .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ikcpexnevb .gt_font_normal { font-weight: normal; } #ikcpexnevb .gt_font_bold { font-weight: bold; } #ikcpexnevb .gt_font_italic { font-style: italic; } #ikcpexnevb .gt_super { font-size: 65%; } #ikcpexnevb .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #ikcpexnevb .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #ikcpexnevb .gt_asterisk { font-size: 100%; vertical-align: 0; } #ikcpexnevb .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #ikcpexnevb .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #ikcpexnevb .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic N = 103,9501 gender male 49,646 (48%) female 54,304 (52%) age 47 (35, 62) marital married 61,332 (59%) single 25,921 (25%) widowed 6,205 (6.0%) divorced 8,010 (7.7%) separated 2,482 (2.4%) region west 80,387 (77%) east 23,563 (23%) height 171 (165, 178) weight 75 (65, 86) 1 n (%); Median (IQR) 9.7 Simple linear model You learned that simple regression is almost identical to correlation between two variables. simple &lt;- lm(weight ~ height, data=soep) simple #&gt; #&gt; Call: #&gt; lm(formula = weight ~ height, data = soep) #&gt; #&gt; Coefficients: #&gt; (Intercept) height #&gt; -78.4362 0.9034 9.8 Multiple regression with control 9.8.1 Regression model Here comes multiple regression. We have seen this before: multiple &lt;- lm(weight ~ height + gender, data=soep) multiple #&gt; #&gt; Call: #&gt; lm(formula = weight ~ height + gender, data = soep) #&gt; #&gt; Coefficients: #&gt; (Intercept) height genderfemale #&gt; -37.567 0.684 -6.188 9.8.2 Visualization (parallel slopes) We have seen parallel slopes before: Conclusion: The fundamental truth is that the effect of body height on body weight is identical across gender (i.e. for males and females). Males and female are equipped (by nature) with a different starting body weight on average. 9.9 Multiple regression with moderator 9.9.1 Interaction (dummy * dummy) interact0a &lt;- lm(weight ~ region*gender, data=soep) summary(interact0a) #&gt; #&gt; Call: #&gt; lm(formula = weight ~ region * gender, data = soep) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -54.401 -9.987 -2.183 7.599 165.599 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 84.40098 0.07542 1119.145 &lt; 2e-16 *** #&gt; regioneast -0.41388 0.15848 -2.612 0.00901 ** #&gt; genderfemale -15.21763 0.10435 -145.826 &lt; 2e-16 *** #&gt; regioneast:genderfemale 1.50228 0.21919 6.854 7.24e-12 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 14.78 on 103946 degrees of freedom #&gt; Multiple R-squared: 0.2022, Adjusted R-squared: 0.2021 #&gt; F-statistic: 8780 on 3 and 103946 DF, p-value: &lt; 2.2e-16 First glimpse at the margins package. library(margins) #margins(interact0a) summary(margins(interact0a, at = list(region = c(&quot;west&quot;, &quot;east&quot;)))) #&gt; factor region AME SE z p lower upper #&gt; genderfemale 1.0000 -15.2176 0.1044 -145.8260 0.0000 -15.4222 -15.0131 #&gt; genderfemale 2.0000 -13.7153 0.1928 -71.1532 0.0000 -14.0931 -13.3376 #&gt; regioneast 1.0000 0.3709 0.1095 3.3879 0.0007 0.1563 0.5855 #&gt; regioneast 2.0000 0.3709 0.1095 3.3879 0.0007 0.1563 0.5855 Interaction plot from the interactions package. # Dedicated package makes everything easier. library(interactions) cat_plot(interact0a, pred = gender, modx = region) 9.9.2 Interaction (categorical * dummy) interact0b &lt;- lm(weight ~ marital*gender, data=soep) interact0b #&gt; #&gt; Call: #&gt; lm(formula = weight ~ marital * gender, data = soep) #&gt; #&gt; Coefficients: #&gt; (Intercept) maritalsingle #&gt; 85.92239 -5.38961 #&gt; maritalwidowed maritaldivorced #&gt; -4.34815 -0.08313 #&gt; maritalseparated genderfemale #&gt; -1.25931 -15.50285 #&gt; maritalsingle:genderfemale maritalwidowed:genderfemale #&gt; 0.77077 4.85503 #&gt; maritaldivorced:genderfemale maritalseparated:genderfemale #&gt; 0.44475 1.13259 9.9.3 Interaction (continuous * dummy) Note that R automatically adds main effects if you use multiplication operator: Thus \\[ height * female \\] translates to \\[ height + female + height*female \\] interact1 &lt;- lm(weight ~ height*gender, data=soep) interact1 #&gt; #&gt; Call: #&gt; lm(formula = weight ~ height * gender, data = soep) #&gt; #&gt; Coefficients: #&gt; (Intercept) height genderfemale #&gt; -58.7988 0.8031 37.5708 #&gt; height:genderfemale #&gt; -0.2553 9.9.4 Visualization (non-parallel slopes) library(interactions) interact_plot(interact1, pred = height, modx = gender, main.title = &quot;Each group has a different slope.&quot;) Conclusion: The fundamental truth is that the effect of body height on body weight is similar but not identical between males and females. A boy and and girl of exact same body height who experience growth by 1cm are expected to end up with different weight gains. There is effect heterogeneity. 9.9.5 Interaction (continuous * continuous) interact2 &lt;- lm(weight ~ height*age, data=soep) interact2 #&gt; #&gt; Call: #&gt; lm(formula = weight ~ height * age, data = soep) #&gt; #&gt; Coefficients: #&gt; (Intercept) height age height:age #&gt; -80.661777 0.861444 -0.213555 0.002397 The interaction of two continuous variables is harder to interpret. We cannot set the moderator (age) equal to zero, since there is no person with an age of zero (in SOEP). 9.9.6 Visualization (non-parallel slopes) There are conventions to help you choose the best values of the continuous moderator for plotting predicted values. But these conventions don’t always work in every situation. For example, one convention suggested by Cohen and Cohen and popularized by Aiken and West is to use three values of the moderator: the mean, the value one standard deviation above, and the value one standard deviation below the mean. This is what interact_plot() does by default. interact_plot(interact2, pred = height, modx = age) This shows you that interaction between two continuous variables works basically the same way as for a categorical and continuous variable. An interaction says that there’s not a fixed offset: you need to consider both values of x1 and x2 simultaneously in order to predict y. You can see that even with just two continuous variables, coming up with good visualizations are hard. But that’s reasonable: you shouldn’t expect it will be easy to understand how three or more variables simultaneously interact! But again, we’re saved a little because we’re using models for exploration, and you can gradually build up your model over time. The model doesn’t have to be perfect, it just has to help you reveal a little more about your data. Conclusion: The fundamental truth is that the effect of body height on body weight is identical across age. In the regression output age has non-significant coefficients. The interaction plot is suggesting that there is no effect heterogeneity with respect to age (multiple parallel slopes). 9.10 Marginal Effects Now we better understand that the effect of our main explanatory variable might be increased or decreased by another variable. Still, a question is open to answer: What exactly is the effect of our main explanatory variable in the interaction model? In OLS framework regression coefficients have direct interpretation as unconditional marginal effects: predicted change in y due to a unit change in x. Interactions or higher-order terms (e.g. age square) make interpretation difficult or impossible. For interpretation of the effect and the statistical significance, we have to investigate all interacted variables at the same time. Marginal effects are partial derivatives of the regression equation with respect to a variable from the model. \\[ \\begin{align} weight &amp;= \\beta_0 + \\beta_1 \\cdot height \\tag{simple regression} \\\\ \\frac{\\partial weight}{\\partial height} &amp;= \\beta_1 \\tag{unconditional effect} \\\\ weight &amp;= \\beta_0 + \\beta_1 \\cdot height + \\beta_2 \\cdot female + \\beta_3 \\cdot height \\cdot female \\tag{moderated regression} \\\\ \\frac{\\partial weight}{\\partial height} &amp;= \\beta_1 + \\beta_3 \\cdot female \\tag{conditional effect} \\\\ \\end{align} \\] library(stargazer) stargazer(simple, interact1, type=&quot;text&quot;) #&gt; #&gt; ================================================================================= #&gt; Dependent variable: #&gt; ------------------------------------------------------------- #&gt; weight #&gt; (1) (2) #&gt; --------------------------------------------------------------------------------- #&gt; height 0.903*** 0.803*** #&gt; (0.005) (0.008) #&gt; #&gt; genderfemale 37.571*** #&gt; (2.125) #&gt; #&gt; height:genderfemale -0.255*** #&gt; (0.012) #&gt; #&gt; Constant -78.436*** -58.799*** #&gt; (0.799) (1.508) #&gt; #&gt; --------------------------------------------------------------------------------- #&gt; Observations 103,950 103,950 #&gt; R2 0.267 0.289 #&gt; Adjusted R2 0.266 0.289 #&gt; Residual Std. Error 14.170 (df = 103948) 13.955 (df = 103946) #&gt; F Statistic 37,767.980*** (df = 1; 103948) 14,056.330*** (df = 3; 103946) #&gt; ================================================================================= #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 For the simple regression, the coefficient is identical (unconditional). library(margins) margins(simple) #&gt; height #&gt; 0.9034 9.10.1 Marginal effects at representatives (TASK) We can use representative values which we literally plug in the equation. These are the effects for each group (what we have seen before in the interaction plot): \\[ \\begin{align} weight &amp;= \\beta_0 + \\beta_1 \\cdot height + \\beta_2 \\cdot female + \\beta_3 \\cdot height \\cdot female \\tag{interact1} \\\\ \\frac{\\partial weight}{\\partial height} &amp;= \\beta_1 + \\beta_3 \\cdot female \\tag{conditional effect} \\\\ \\end{align} \\] Here is the R code: margins(interact1, at = list(gender = c(&quot;male&quot;, &quot;female&quot;))) #&gt; at(gender) height genderfemale #&gt; male 0.8031 -6.224 #&gt; female 0.5479 -6.224 Please calculate the MER of height in interact1 for the two gender programmtic in R. 9.10.2 Marginal effects at the mean (TASK) Plugging in values is not always as easy as it seems to be. What should we use for age? Values as 0, 1 or 2 does not makes sense for age. Okay, we could use some representative age, e.g. 30 and 40. But what is our theoretical justification to report the effect for age 30 and not age 31? Another strategy is to use mean values of the variables. \\[ \\begin{align} weight &amp;= \\beta_0 + \\beta_1 \\cdot height + \\beta_2 \\cdot age + \\beta_3 \\cdot height \\cdot age \\tag{interact2} \\\\ \\frac{\\partial weight}{\\partial height} &amp;= \\beta_1 + \\beta_3 \\cdot age \\tag{conditional effect} \\\\ \\end{align} \\] library(&quot;stargazer&quot;) stargazer(simple, interact2, type=&quot;text&quot;) #&gt; #&gt; ================================================================================= #&gt; Dependent variable: #&gt; ------------------------------------------------------------- #&gt; weight #&gt; (1) (2) #&gt; --------------------------------------------------------------------------------- #&gt; height 0.903*** 0.861*** #&gt; (0.005) (0.013) #&gt; #&gt; age -0.214*** #&gt; (0.044) #&gt; #&gt; height:age 0.002*** #&gt; (0.0003) #&gt; #&gt; Constant -78.436*** -80.662*** #&gt; (0.799) (2.214) #&gt; #&gt; --------------------------------------------------------------------------------- #&gt; Observations 103,950 103,950 #&gt; R2 0.267 0.309 #&gt; Adjusted R2 0.266 0.309 #&gt; Residual Std. Error 14.170 (df = 103948) 13.751 (df = 103946) #&gt; F Statistic 37,767.980*** (df = 1; 103948) 15,516.970*** (df = 3; 103946) #&gt; ================================================================================= #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 Here is the R code with margins: interact2 &lt;- lm(weight ~ height*age, data=soep) interact2 #&gt; #&gt; Call: #&gt; lm(formula = weight ~ height * age, data = soep) #&gt; #&gt; Coefficients: #&gt; (Intercept) height age height:age #&gt; -80.661777 0.861444 -0.213555 0.002397 #summary(margins(interact2)) margins(interact2, at = list(age = mean_age)) #&gt; at(age) height age #&gt; 48.05 0.9766 0.1977 Please calculate the MEM of height in interact2 programmtic in R. 9.10.3 Average marginal effects The default margins commands shows you something else than MER and MEM, namely average marginal effects. AMEs calculate marginal effects at every observed value of X and average across the resulting effect estimates. AMEs are particularly useful because – unlike MEMs – produce a single quantity summary that reflects the full distribution of X rather than an arbitrary prediction. margins(interact1) #&gt; height genderfemale #&gt; 0.6698 -6.224 A summary provides you with information that cannot easily be calculated by hand, e.g. standard error, p-value, confidence interval: summary(margins(interact1)) #&gt; factor AME SE z p lower upper #&gt; genderfemale -6.2236 0.1169 -53.2405 0.0000 -6.4527 -5.9945 #&gt; height 0.6698 0.0062 107.8003 0.0000 0.6576 0.6820 "],["fixed-effects.html", "Chapter 10 Fixed effects 10.1 Cross-sectional Data (2 pt) 10.2 Panel Data (2 pt) 10.3 Fixed Effects Regression", " Chapter 10 Fixed effects 10.1 Cross-sectional Data (2 pt) Suppose you want to learn the effect of price on the demand for back massages. Read in the following data from four Midwest locations (call it crosssection) and print the table with the gt package. # Crosssection crosssection &lt;- data.frame(Location = c(&quot;Chicago&quot;, &quot;Peoria&quot;, &quot;Milwaukee&quot;, &quot;Madison&quot;), Year = rep(2003, 4), Price = c(75, 50, 60, 55), Quantity = c(2.0, 1.0, 1.5, 0.8)) library(ggplot2) library(gt) table_1 &lt;- gt(data = crosssection) %&gt;% tab_header(title = &quot;Table 1: Cross-sectional Data&quot;) %&gt;% cols_label( Location = md(&quot;**Location**&quot;), Year = md(&quot;**Year**&quot;), Price = md(&quot;**Price**&quot;), Quantity = md(&quot;**Per Capita&lt;br&gt;Quantity**&quot;) ) # Show the gt Table table_1 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #rxqrenhwhu .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #rxqrenhwhu .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #rxqrenhwhu .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #rxqrenhwhu .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #rxqrenhwhu .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rxqrenhwhu .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #rxqrenhwhu .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #rxqrenhwhu .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #rxqrenhwhu .gt_column_spanner_outer:first-child { padding-left: 0; } #rxqrenhwhu .gt_column_spanner_outer:last-child { padding-right: 0; } #rxqrenhwhu .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #rxqrenhwhu .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #rxqrenhwhu .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #rxqrenhwhu .gt_from_md > :first-child { margin-top: 0; } #rxqrenhwhu .gt_from_md > :last-child { margin-bottom: 0; } #rxqrenhwhu .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #rxqrenhwhu .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #rxqrenhwhu .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #rxqrenhwhu .gt_row_group_first td { border-top-width: 2px; } #rxqrenhwhu .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #rxqrenhwhu .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #rxqrenhwhu .gt_first_summary_row.thick { border-top-width: 2px; } #rxqrenhwhu .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rxqrenhwhu .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #rxqrenhwhu .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #rxqrenhwhu .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #rxqrenhwhu .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rxqrenhwhu .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #rxqrenhwhu .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #rxqrenhwhu .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #rxqrenhwhu .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #rxqrenhwhu .gt_left { text-align: left; } #rxqrenhwhu .gt_center { text-align: center; } #rxqrenhwhu .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #rxqrenhwhu .gt_font_normal { font-weight: normal; } #rxqrenhwhu .gt_font_bold { font-weight: bold; } #rxqrenhwhu .gt_font_italic { font-style: italic; } #rxqrenhwhu .gt_super { font-size: 65%; } #rxqrenhwhu .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #rxqrenhwhu .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #rxqrenhwhu .gt_asterisk { font-size: 100%; vertical-align: 0; } #rxqrenhwhu .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #rxqrenhwhu .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #rxqrenhwhu .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Table 1: Cross-sectional Data Location Year Price Per CapitaQuantity Chicago 2003 75 2.0 Peoria 2003 50 1.0 Milwaukee 2003 60 1.5 Madison 2003 55 0.8 Please create the plot (in Base R or ggplot). 10.2 Panel Data (2 pt) Read in additional data from Table 2 (call it paneldata). library(ggplot2) library(tidyverse) # Panel Data paneldata &lt;- data.frame(Location = c(&quot;Chicago&quot;, &quot;Chicago&quot;, &quot;Peoria&quot;, &quot;Peoria&quot;, &quot;Milwaukee&quot;, &quot;Milwaukee&quot;, &quot;Madison&quot;, &quot;Madison&quot;), Year = rep(2003:2004, 4), Price = c(75, 85, 50, 48, 60, 65, 55, 60), Quantity = c(2.0, 1.8, 1.0, 1.1, 1.5, 1.4, 0.8, 0.7)) table_2 &lt;- gt(data = paneldata) %&gt;% tab_header(title = &quot;Table 2: Panel Data&quot;) %&gt;% cols_label( Location = md(&quot;**Location**&quot;), Year = md(&quot;**Year**&quot;), Price = md(&quot;**Price**&quot;), Quantity = md(&quot;**Per Capita&lt;br&gt;Quantity**&quot;) ) table_2 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #dydgjrmuvs .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #dydgjrmuvs .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dydgjrmuvs .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #dydgjrmuvs .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #dydgjrmuvs .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dydgjrmuvs .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dydgjrmuvs .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #dydgjrmuvs .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #dydgjrmuvs .gt_column_spanner_outer:first-child { padding-left: 0; } #dydgjrmuvs .gt_column_spanner_outer:last-child { padding-right: 0; } #dydgjrmuvs .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #dydgjrmuvs .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #dydgjrmuvs .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #dydgjrmuvs .gt_from_md > :first-child { margin-top: 0; } #dydgjrmuvs .gt_from_md > :last-child { margin-bottom: 0; } #dydgjrmuvs .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #dydgjrmuvs .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #dydgjrmuvs .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #dydgjrmuvs .gt_row_group_first td { border-top-width: 2px; } #dydgjrmuvs .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dydgjrmuvs .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #dydgjrmuvs .gt_first_summary_row.thick { border-top-width: 2px; } #dydgjrmuvs .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dydgjrmuvs .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dydgjrmuvs .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #dydgjrmuvs .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #dydgjrmuvs .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dydgjrmuvs .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dydgjrmuvs .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #dydgjrmuvs .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dydgjrmuvs .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #dydgjrmuvs .gt_left { text-align: left; } #dydgjrmuvs .gt_center { text-align: center; } #dydgjrmuvs .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #dydgjrmuvs .gt_font_normal { font-weight: normal; } #dydgjrmuvs .gt_font_bold { font-weight: bold; } #dydgjrmuvs .gt_font_italic { font-style: italic; } #dydgjrmuvs .gt_super { font-size: 65%; } #dydgjrmuvs .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #dydgjrmuvs .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #dydgjrmuvs .gt_asterisk { font-size: 100%; vertical-align: 0; } #dydgjrmuvs .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #dydgjrmuvs .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #dydgjrmuvs .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Table 2: Panel Data Location Year Price Per CapitaQuantity Chicago 2003 75 2.0 Chicago 2004 85 1.8 Peoria 2003 50 1.0 Peoria 2004 48 1.1 Milwaukee 2003 60 1.5 Milwaukee 2004 65 1.4 Madison 2003 55 0.8 Madison 2004 60 0.7 Please create the plot. ggplot(paneldata, aes(x=Price, y=Quantity)) + geom_point() + labs(title=&quot;Relationship between Price and Quantity&quot;, x=&quot;Price&quot;, y=&quot;Quantity&quot;) + geom_smooth(aes(colour = Location), method = &quot;lm&quot;, se = FALSE) + geom_smooth(method = &quot;lm&quot;, se = FALSE) 10.3 Fixed Effects Regression 10.3.1 First Difference (2 pt) Please add two columns, i.e. the change in price (name it P_diff) and the change in quantity (name it Q_diff) to your dataframe (1 pt). table3 &lt;- paneldata %&gt;% group_by(Location) %&gt;% mutate(P_diff = Price - lag(Price), Q_diff = Quantity - lag(Quantity)) #library(xtable) # may handle formulas in colnames #print(xtable(table3)), type = &quot;html&quot;) #print(xtable(head(cars)), type = &quot;html&quot;) #print(xtable(table3), type = &quot;html&quot;) library(gt) gt(data = table3, rowname_col = TRUE, groupname_col=FALSE) %&gt;% tab_header(title = &quot;Table 3: Data for Difference Equation Estimation.&quot;) %&gt;% cols_label( Location = md(&quot;**Location**&quot;), Year = md(&quot;**Year**&quot;), Price = md(&quot;**Price**&quot;), Quantity = md(&quot;**Per Capita&lt;br&gt;Quantity**&quot;), P_diff = md(&quot;**Delta P**&quot;), Q_diff = md(&quot;**Delta Q**&quot;)) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #pvqliyukyz .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pvqliyukyz .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pvqliyukyz .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pvqliyukyz .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #pvqliyukyz .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pvqliyukyz .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pvqliyukyz .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pvqliyukyz .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pvqliyukyz .gt_column_spanner_outer:first-child { padding-left: 0; } #pvqliyukyz .gt_column_spanner_outer:last-child { padding-right: 0; } #pvqliyukyz .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #pvqliyukyz .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #pvqliyukyz .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pvqliyukyz .gt_from_md > :first-child { margin-top: 0; } #pvqliyukyz .gt_from_md > :last-child { margin-bottom: 0; } #pvqliyukyz .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pvqliyukyz .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #pvqliyukyz .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #pvqliyukyz .gt_row_group_first td { border-top-width: 2px; } #pvqliyukyz .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pvqliyukyz .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #pvqliyukyz .gt_first_summary_row.thick { border-top-width: 2px; } #pvqliyukyz .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pvqliyukyz .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pvqliyukyz .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pvqliyukyz .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pvqliyukyz .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pvqliyukyz .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pvqliyukyz .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #pvqliyukyz .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pvqliyukyz .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pvqliyukyz .gt_left { text-align: left; } #pvqliyukyz .gt_center { text-align: center; } #pvqliyukyz .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pvqliyukyz .gt_font_normal { font-weight: normal; } #pvqliyukyz .gt_font_bold { font-weight: bold; } #pvqliyukyz .gt_font_italic { font-style: italic; } #pvqliyukyz .gt_super { font-size: 65%; } #pvqliyukyz .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #pvqliyukyz .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #pvqliyukyz .gt_asterisk { font-size: 100%; vertical-align: 0; } #pvqliyukyz .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #pvqliyukyz .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #pvqliyukyz .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Table 3: Data for Difference Equation Estimation. Location Year Price Per CapitaQuantity Delta P Delta Q Chicago 2003 75 2.0 NA NA Chicago 2004 85 1.8 10 -0.2 Peoria 2003 50 1.0 NA NA Peoria 2004 48 1.1 -2 0.1 Milwaukee 2003 60 1.5 NA NA Milwaukee 2004 65 1.4 5 -0.1 Madison 2003 55 0.8 NA NA Madison 2004 60 0.7 5 -0.1 Run a first difference estimation by regressing change in quantity on change in price (1 pt). 10.3.2 Within Estimator (2 pt) Run a within fixed effects regression in two ways. Function plm() from plm package. Replicate time demeaning programmatic in R. Calculate the mean of Q and P per individual (group). Subtract the individual mean from each observation. Regress these time-demeaned observation (with standard lm command). table4 &lt;- paneldata %&gt;% group_by(Location) %&gt;% mutate(P_diff = Price - lag(Price), Q_diff = Quantity - lag(Quantity), P_P_mean = Price - mean(Price), Q_Q_mean = Quantity - mean(Quantity)) library(gt) gt(data = table4, rowname_col = TRUE, groupname_col=FALSE) %&gt;% tab_header(title = &quot;Table 4: Data for Within Time Demean Estimation.&quot;) %&gt;% cols_label( Location = md(&quot;**Location**&quot;), Year = md(&quot;**Year**&quot;), Price = md(&quot;**Price**&quot;), Quantity = md(&quot;**Per Capita&lt;br&gt;Quantity**&quot;), P_diff = md(&quot;**Delta P**&quot;), Q_diff = md(&quot;**Delta Q**&quot;), P_P_mean = md(&quot;**P - mean(P)**&quot;), Q_Q_mean = md(&quot;**Q - mean(Q)**&quot;)) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #phwfamneiw .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #phwfamneiw .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #phwfamneiw .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #phwfamneiw .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #phwfamneiw .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #phwfamneiw .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #phwfamneiw .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #phwfamneiw .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #phwfamneiw .gt_column_spanner_outer:first-child { padding-left: 0; } #phwfamneiw .gt_column_spanner_outer:last-child { padding-right: 0; } #phwfamneiw .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #phwfamneiw .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #phwfamneiw .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #phwfamneiw .gt_from_md > :first-child { margin-top: 0; } #phwfamneiw .gt_from_md > :last-child { margin-bottom: 0; } #phwfamneiw .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #phwfamneiw .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #phwfamneiw .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #phwfamneiw .gt_row_group_first td { border-top-width: 2px; } #phwfamneiw .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #phwfamneiw .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #phwfamneiw .gt_first_summary_row.thick { border-top-width: 2px; } #phwfamneiw .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #phwfamneiw .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #phwfamneiw .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #phwfamneiw .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #phwfamneiw .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #phwfamneiw .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #phwfamneiw .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #phwfamneiw .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #phwfamneiw .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #phwfamneiw .gt_left { text-align: left; } #phwfamneiw .gt_center { text-align: center; } #phwfamneiw .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #phwfamneiw .gt_font_normal { font-weight: normal; } #phwfamneiw .gt_font_bold { font-weight: bold; } #phwfamneiw .gt_font_italic { font-style: italic; } #phwfamneiw .gt_super { font-size: 65%; } #phwfamneiw .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #phwfamneiw .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #phwfamneiw .gt_asterisk { font-size: 100%; vertical-align: 0; } #phwfamneiw .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #phwfamneiw .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #phwfamneiw .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Table 4: Data for Within Time Demean Estimation. Location Year Price Per CapitaQuantity Delta P Delta Q P - mean(P) Q - mean(Q) Chicago 2003 75 2.0 NA NA -5.0 0.10 Chicago 2004 85 1.8 10 -0.2 5.0 -0.10 Peoria 2003 50 1.0 NA NA 1.0 -0.05 Peoria 2004 48 1.1 -2 0.1 -1.0 0.05 Milwaukee 2003 60 1.5 NA NA -2.5 0.05 Milwaukee 2004 65 1.4 5 -0.1 2.5 -0.05 Madison 2003 55 0.8 NA NA -2.5 0.05 Madison 2004 60 0.7 5 -0.1 2.5 -0.05 10.3.3 LSDV (1 pt) Run a LSDV regression, i.e. include all individuals as dummy variables in your standard lm regression. 10.3.4 Comparison (1 pt) Create a model overview with stargazer. Start with a pooling model. You should have 5 models in total. You need to play around with stargazer options in order to make it good looking. Drop the constant in all your models. Drop model.numbers and dep.var.labels.include or the F statistic. You can relabel column.labels in stargazer as well. Your result should look like this: paneldata &lt;- data.frame(Location = c(&quot;Chicago&quot;, &quot;Chicago&quot;, &quot;Peoria&quot;, &quot;Peoria&quot;, &quot;Milwaukee&quot;, &quot;Milwaukee&quot;, &quot;Madison&quot;, &quot;Madison&quot;), Year = rep(2003:2004, 4), Price = c(75, 85, 50, 48, 60, 65, 55, 60), Quantity = c(2.0, 1.8, 1.0, 1.1, 1.5, 1.4, 0.8, 0.7)) library(sjmisc) library(tidyverse) paneldata &lt;- paneldata %&gt;% group_by(Location) %&gt;% mutate(dP = last(Price) - first(Price), dQ = last(Quantity) - first(Quantity), dP=replace(dP, row_number()==1, NA), dQ=replace(dQ, row_number()==1, NA), mean_P = mean(Price), mean_Q = mean(Quantity), P_mean_P = Price - mean_P, Q_mean_Q = Quantity - mean_Q, Price_ave = Price - ave(Price, Location), Quantity_ave = Quantity - ave(Quantity, Location)) %&gt;% mutate_at(.vars = c(&quot;Quantity&quot;,&quot;Price&quot;), .funs = list(&quot;centered&quot; = center)) %&gt;% ungroup() # for better comparison in stargazer paneldata_demeaned &lt;- with(paneldata, data.frame(Quantity = Quantity - ave(Quantity, Location), Price = Price - ave(Price, Location))) # Pooling pooling &lt;- lm(Quantity ~ Price - 1, data=paneldata) # First Difference Estimation FD &lt;- lm(dQ ~ dP -1, data=paneldata) names(FD$coefficients) &lt;- c(&#39;Price&#39;) # Time demean TDM &lt;- lm(Quantity ~ Price -1, data=paneldata_demeaned) # Fixed Effects library(plm) FE &lt;- plm(Quantity ~ Price -1, data=paneldata, model=&quot;within&quot;, index = c(&quot;Location&quot;,&quot;Year&quot;)) # Least Squares Dummy Variable Estimation (Individual FE) LSDV &lt;- lm(Quantity ~ Price + Location -1, data=paneldata) # Stargazer Comparison library(stargazer) stargazer(pooling, FD, TDM, FE, LSDV, type=&quot;text&quot;, keep=c(&quot;Price&quot;), column.labels=c(&quot;Pooling&quot;, &quot;FD&quot;, &quot;TD&quot;, &quot;FE&quot;, &quot;LSDV&quot;), dep.var.labels.include = FALSE, model.numbers = FALSE, omit.stat=&quot;f&quot;) #&gt; #&gt; ========================================================================================= #&gt; Dependent variable: #&gt; --------------------------------------------------------------------- #&gt; OLS OLS OLS panel OLS #&gt; linear #&gt; Pooling FD TD FE LSDV #&gt; ----------------------------------------------------------------------------------------- #&gt; Price 0.021*** -0.021*** -0.021*** -0.021*** -0.021*** #&gt; (0.002) (0.003) (0.002) (0.003) (0.003) #&gt; #&gt; ----------------------------------------------------------------------------------------- #&gt; Observations 8 4 8 8 8 #&gt; R2 0.953 0.950 0.950 0.950 1.000 #&gt; Adjusted R2 0.947 0.933 0.943 0.883 1.000 #&gt; Residual Std. Error 0.314 (df = 7) 0.034 (df = 3) 0.016 (df = 7) 0.024 (df = 3) #&gt; ========================================================================================= #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 "],["first-difference.html", "Chapter 11 First Difference 11.1 Application: Mincer earnings function 11.2 Data Management (4 pt) 11.3 Data Visualization (2 pt) 11.4 Data Modeling (2 pt) 11.5 Minimal Example", " Chapter 11 First Difference 11.1 Application: Mincer earnings function 11.2 Data Management (4 pt) # Load data library(haven) library(tidyverse) library(magrittr) # Read pl &lt;- readRDS(&quot;data/pl_reduced.rds&quot;) pequiv &lt;- readRDS(&quot;data/pequiv_reduced.rds&quot;) # Merge data master &lt;- merge(pl, pequiv, by = c(&quot;pid&quot;, &quot;syear&quot;)) All negative values represent missing values. Do a complete case analysis (n should be 338892). Drop all Stata labels with remove_all_labels() from sjlabelled package. # Drop missings master[master &lt; 0] &lt;- NA master &lt;- master[complete.cases(master), ] # Drop labels library(sjlabelled) master &lt;- remove_all_labels(master) Calculate each information in master per individual (group by id). Rename plh0182 to satis, d11109 to years_educ and d11101 to age. Hourly wages can be calculated as total annual income (ijob1) divided by total annual work hours (e11101). You may store log of hourly wage as a separate column/variable log_inc_hourly. Please filter for annual work hours larger than 0 (otherwise results might be Inf), before dividing. Please filter for hourly wages larger than 1, before taking the log. Years of schooling are readily available in SOEP. Tenure is not available in SOEP. (reilich2011smoking?) suggests “Experience is the potential experience following Mincer. We calculate the age minus the years of schooling minus 6 and minus the number of years with the experience of being unemployed.”. Calculate tenure like this tenure = age - years_educ - 6 - years_unemp. Calculate the number of years being unemployed years_unemp as the number of observations per individual minus the sum of all years that this individual was employed. e11102 is the employment status (0 for unemployed, 1 for employed) in a particular year. Some people exhibit negative tenure for various reasons. Filter for positive values. Store the prepared data as mincer. Summary statistics should roughly be equal to the following table: # Data stuff mincer &lt;- master %&gt;% rename(satis = plh0182, years_educ = d11109, age = d11101) %&gt;% group_by(pid) %&gt;% filter(e11101 &gt; 0) %&gt;% mutate(inc_hourly = ijob1/e11101) %&gt;% filter(inc_hourly &gt; 1) %&gt;% mutate(log_inc_hourly = log(inc_hourly)) %&gt;% mutate(years_obs = n()) %&gt;% mutate(years_emp = sum(e11102)) %&gt;% mutate(years_unemp = n() - sum(e11102)) %&gt;% mutate(tenure = age - years_educ - 6 - years_unemp) %&gt;% filter(tenure &gt; 0) %&gt;% arrange(pid) #select(c(&quot;pid&quot;, &quot;syear&quot;, &quot;years_educ&quot;, &quot;tenure&quot;, &quot;inc_hourly&quot;, &quot;log_inc_hourly&quot;)) mincer &lt;- as.data.frame(mincer) library(stargazer) stargazer(mincer[,c(3:5)], type=&quot;text&quot;) library(gtsummary) mincer %&gt;% select(&quot;years_educ&quot;, &quot;tenure&quot;, &quot;inc_hourly&quot;) %&gt;% tbl_summary() %&gt;% bold_labels() %&gt;% add_n() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #kjjxayysqn .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #kjjxayysqn .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kjjxayysqn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #kjjxayysqn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #kjjxayysqn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kjjxayysqn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kjjxayysqn .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #kjjxayysqn .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #kjjxayysqn .gt_column_spanner_outer:first-child { padding-left: 0; } #kjjxayysqn .gt_column_spanner_outer:last-child { padding-right: 0; } #kjjxayysqn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #kjjxayysqn .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #kjjxayysqn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #kjjxayysqn .gt_from_md > :first-child { margin-top: 0; } #kjjxayysqn .gt_from_md > :last-child { margin-bottom: 0; } #kjjxayysqn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #kjjxayysqn .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #kjjxayysqn .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #kjjxayysqn .gt_row_group_first td { border-top-width: 2px; } #kjjxayysqn .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kjjxayysqn .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #kjjxayysqn .gt_first_summary_row.thick { border-top-width: 2px; } #kjjxayysqn .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kjjxayysqn .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kjjxayysqn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #kjjxayysqn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #kjjxayysqn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kjjxayysqn .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kjjxayysqn .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #kjjxayysqn .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kjjxayysqn .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #kjjxayysqn .gt_left { text-align: left; } #kjjxayysqn .gt_center { text-align: center; } #kjjxayysqn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #kjjxayysqn .gt_font_normal { font-weight: normal; } #kjjxayysqn .gt_font_bold { font-weight: bold; } #kjjxayysqn .gt_font_italic { font-style: italic; } #kjjxayysqn .gt_super { font-size: 65%; } #kjjxayysqn .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #kjjxayysqn .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #kjjxayysqn .gt_asterisk { font-size: 100%; vertical-align: 0; } #kjjxayysqn .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #kjjxayysqn .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #kjjxayysqn .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic N N = 189,5141 pid 189,514 2,977,501 (505,402, 20,009,405) years_educ 189,514 11.50 (10.50, 13.50) tenure 189,514 24 (14, 32) inc_hourly 189,514 12 (8, 17) 1 Median (IQR) 11.3 Data Visualization (2 pt) The graph shows the hourly wage (not logged) in relation to the work experience for 5 random people that are observed for at least 5 years. You can use the sample_n_groups() function from previous exercises. sample_n_groups = function(grouped_df, size, replace = FALSE, weight=NULL) { grp_var &lt;- grouped_df %&gt;% groups %&gt;% unlist %&gt;% as.character random_grp &lt;- grouped_df %&gt;% summarise() %&gt;% sample_n(size, replace, weight) %&gt;% mutate(unique_id = 1:NROW(.)) grouped_df %&gt;% right_join(random_grp, by=grp_var) %&gt;% group_by_(grp_var) } library(ggplot2) set.seed(44) mincer %&gt;% group_by(pid) %&gt;% nest() %&gt;% filter(purrr::map_lgl(data, ~ nrow(.x) &gt;= 5)) %&gt;% unnest() %&gt;% sample_n_groups(5) %&gt;% # select 3 pid for all time ggplot(aes(x = tenure, y = inc_hourly, col=factor(pid))) + geom_line() + geom_point() + labs(title=&quot;Income and Work Experience&quot;, subtitle=&quot;Selected Sample of 5 People&quot;, x=&quot;Work Experience (Years)&quot;, y=&quot;Hourly Wage (Euro)&quot;, colour=&quot;person&quot;) + # give some illustrative labels theme(legend.position = &quot;none&quot;) 11.4 Data Modeling (2 pt) We select a subset of data for the years 2017 and 2018 (T=2). We calculate a pooling model, first difference and fixed effects. We use the plm package for all model setups. Estimate models without education and without the constant: \\[\\ln w_{it} = \\beta_1 \\text{tenure}_{it} + \\beta_2 \\text{tenure}^2_{it} \\] mincer1718 &lt;- mincer %&gt;% filter(syear == 2017 | syear == 2018) # OLS library(plm) LM2 &lt;- plm(log_inc_hourly ~ tenure + I(tenure^2) -1, data=mincer1718, model=&quot;pooling&quot;, index = c(&quot;pid&quot;,&quot;syear&quot;)) # Fixed Effects FE2 &lt;- plm(log_inc_hourly ~ tenure + I(tenure^2) -1, data=mincer1718, model=&quot;within&quot;, index = c(&quot;pid&quot;,&quot;syear&quot;)) # Fixed Effects FD2 &lt;- plm(log_inc_hourly ~ tenure + I(tenure^2) -1, data=mincer1718, model=&quot;fd&quot;, index = c(&quot;pid&quot;,&quot;syear&quot;)) Create a stargazer table for model comparison, such as: # Stargazer Comparison library(stargazer) stargazer(LM2, FD2, FE2, type=&quot;text&quot;, column.labels=c(&quot;Pooling&quot;, &quot;FD&quot;, &quot;FE&quot;), #keep=c(&quot;inc&quot;), dep.var.labels.include = FALSE, model.numbers = FALSE, omit.stat=&quot;f&quot;) #&gt; #&gt; ========================================== #&gt; Dependent variable: #&gt; ----------------------------- #&gt; Pooling FD FE #&gt; ------------------------------------------ #&gt; tenure 0.203*** 0.077*** 0.077*** #&gt; (0.001) (0.012) (0.012) #&gt; #&gt; I(tenure2) -0.003*** -0.001*** -0.001*** #&gt; (0.00002) (0.0002) (0.0002) #&gt; #&gt; ------------------------------------------ #&gt; Observations 15,440 6,229 15,440 #&gt; R2 0.106 0.0003 0.015 #&gt; Adjusted R2 0.106 0.0001 -1.443 #&gt; ========================================== #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 11.5 Minimal Example Please create a minimal working example to illustrate the differences between FD and FE. How minimal can it be? MWE &lt;- data.frame(id = c(1,1,1,1,1,1,1,2,2,2,2,2,2,2), time = seq(from=1, to=7, by=1), married = c(0,0,1,1,0,1,1, 0,0,1,1,0,1,1), happy = c(5,5,8,7,4,7,5, 7,7,9,8,5,8,6)) #married = c(0,0,1,1,0,1,1, 1,1,0,0,0,1,0), #happy = c(6,5,8,7,4,7,5, 7,7,3,3,5,5,6)) #married = round(runif(14, min = 0, max = 1),0), #happy = round(runif(14, min = 4, max = 10),0)) Create a dataset MWE for two people (id 1 and 2) with 7 observations (time periods from 1 to 7). Create two variables. A dummy called married (regressor) and a happiness outcome variable (natural numbers ranging from 0 to 10). You may create the values of married and happy manually. Create a line plot for happiness over time colored by each individual. (In total, you should have two lines of different color.) Mark the marriage status by any reasonable label (there are several options in ggplot). library(ggplot2) ggplot(MWE, aes(x = time, y = happy, col=factor(id))) + geom_line(position = position_jitter(w = 0.2, h = 0.2)) + geom_point(aes(shape=factor(married)), size=4, position = position_jitter(w = 0.2, h = 0.2)) + labs(title=&quot;Marriage and Happiness&quot;, subtitle = &quot;Jitter added to confuse the reader.&quot;, x=&quot;Time (Years)&quot;, y=&quot;Happiness&quot;, colour=&quot;Person&quot;, shape=&quot;Marriage&quot;) Calculate a FE and FD estimator for how the marriage dummy affects happiness. Play around with different values and see how the FE and FD estimators changes. Select values such that FD is reasonable higher than FE. The two models look like this: # Fixed Effects FE_marry &lt;- plm(happy ~ married -1, data=MWE, model=&quot;within&quot;, index = c(&quot;id&quot;,&quot;time&quot;)) #FE_marry &lt;- lm(happy ~ married + as.factor(id), data=MWE) # First Difference FD_marry &lt;- plm(happy ~ married -1, data=MWE, model=&quot;fd&quot;, index = c(&quot;id&quot;,&quot;time&quot;)) stargazer(FE_marry, FD_marry, type=&quot;text&quot;, column.labels=c(&quot;FE&quot;, &quot;FD&quot;), keep=c(&quot;married&quot;), dep.var.labels.include = FALSE, model.numbers = FALSE) #&gt; #&gt; ===================================================== #&gt; Dependent variable: #&gt; ---------------------------- #&gt; FE FD #&gt; ----------------------------------------------------- #&gt; married 1.750** 2.833*** #&gt; (0.592) (0.405) #&gt; #&gt; ----------------------------------------------------- #&gt; Observations 14 12 #&gt; R2 0.443 0.883 #&gt; Adjusted R2 0.341 0.883 #&gt; F Statistic (df = 1; 11) 8.741** 48.908*** #&gt; ===================================================== #&gt; Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 From this table, it can be seen that the immediate impact getting married (2.83) is higher than the overall level difference of being married (1.75). "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
